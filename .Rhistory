strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.111509 %
# STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 37.155688
# SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.352880
# MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret) # -99.1467
# TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 26.831411 %
# INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.26754
# Turnover ----
library(reshape)
library(xts)
# strategy turnover ----
# get intermediate data frame
turnover_calc <- strategy
s_weights <- subset(turnover_calc,select= c("ym","Weight","Id"))
s_weights <-reshape(s_weights, idvar = "ym", timevar = "Id", direction = "wide")
s_weights <-as.xts(s_weights)
s_weights[is.na(s_weights)]=0
s_lead_weights <- as.data.frame(s_weights)
s_lead_weights <-s_lead_weights %>% mutate_all(lead)
as.data.frame(s_lead_weights)
s_lead_weights<-as.data.frame(s_lead_weights)
s_weights<-as.data.frame(s_weights)
s_turnover_weights<-as.data.frame(txns <- s_lead_weights - s_weights) #s_tunover_weights - stuff inside the bracker in the fromula
s_turnover_weights[is.na(s_turnover_weights)]=0
s_turnover_pattern <- as.data.frame(rowSums(abs(s_turnover_weights[,1:length(s_turnover_weights)])),order.by=index(s_turnover_weights))
colnames(s_turnover_pattern)[1] <- "one"
s_turnover_pattern<-as.data.frame(s_turnover_pattern)
strategy.turnover <- (sum(s_turnover_pattern$one) / (2*nrow(s_turnover_pattern)))
growthMom_BRA_ValueWeight <- c(strategy.retBricT,strategy.retExBricT,strategy.sdBricT,strategy.srBricT,strategy.mdBricT,strategy.teBricT,strategy.irBricT, strategy.avgNumberOfStocks, strategy.topTenBricT, strategy.turnover, nrow(strategy))
growthMom_BRA_ValueWeight
BRIC.strategy <- BRIC.maindata
## Value factor
## creating a large cap and high B/M ratio column (large cap value)
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# subsetting only value stocks (cutoff = median) Look up CUTOFF details
# Determine the value breakpoints
hlpvariable2 <- BRIC.maindata[month==7, .(median = quantile(BM , probs = c(0.5), na.rm=T)),by=year]
# Merge the value portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median,"Value",(ifelse(BM<=median,"Growth",NA)))]
# low vol breakpoints ----
# Determine the low_vol breakpoints based on big stocks only
hlpvariable2 <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
# Merge the low_vol portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
# filtering for lowVol stocks
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
# filtering for winner stocks
BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
strat.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
colnames(strat.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
strategy.avgNumberOfStocks <- sum(strat.EqualWeights$NumberOfStocks)/length(strat.EqualWeights$NumberOfStocks)
# ----
# assign a new working variable
strategy <- BRIC.strategy
# value weight returns
## calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
## calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
## calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
# TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
# return stats ----
# RETURNS ----
# per month
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.111509 %
# STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 37.155688
# SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.352880
# MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret) # -99.1467
# TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 26.831411 %
# INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.26754
# Turnover ----
library(reshape)
library(xts)
# strategy turnover ----
# get intermediate data frame
turnover_calc <- strategy
s_weights <- subset(turnover_calc,select= c("ym","Weight","Id"))
s_weights <-reshape(s_weights, idvar = "ym", timevar = "Id", direction = "wide")
s_weights <-as.xts(s_weights)
s_weights[is.na(s_weights)]=0
s_lead_weights <- as.data.frame(s_weights)
s_lead_weights <-s_lead_weights %>% mutate_all(lead)
as.data.frame(s_lead_weights)
s_lead_weights<-as.data.frame(s_lead_weights)
s_weights<-as.data.frame(s_weights)
s_turnover_weights<-as.data.frame(txns <- s_lead_weights - s_weights) #s_tunover_weights - stuff inside the bracker in the fromula
s_turnover_weights[is.na(s_turnover_weights)]=0
s_turnover_pattern <- as.data.frame(rowSums(abs(s_turnover_weights[,1:length(s_turnover_weights)])),order.by=index(s_turnover_weights))
colnames(s_turnover_pattern)[1] <- "one"
s_turnover_pattern<-as.data.frame(s_turnover_pattern)
strategy.turnover <- (sum(s_turnover_pattern$one) / (2*nrow(s_turnover_pattern)))
lowVolMom_BRA_ValueWeight <- c(strategy.retBricT,strategy.retExBricT,strategy.sdBricT,strategy.srBricT,strategy.mdBricT,strategy.teBricT,strategy.irBricT, strategy.avgNumberOfStocks, strategy.topTenBricT, strategy.turnover, nrow(strategy))
lowVolMom_BRA_ValueWeight
BRIC.strategy <- BRIC.maindata
## Value factor
## creating a large cap and high B/M ratio column (large cap value)
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# subsetting only value stocks (cutoff = median) Look up CUTOFF details
# Determine the value breakpoints
hlpvariable2 <- BRIC.maindata[month==7, .(median = quantile(BM , probs = c(0.5), na.rm=T)),by=year]
# Merge the value portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median,"Value",(ifelse(BM<=median,"Growth",NA)))]
# low vol breakpoints ----
# Determine the low_vol breakpoints based on big stocks only
hlpvariable2 <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
# Merge the low_vol portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
BRIC.strategy <- subset(BRIC.strategy, pf.value == "Growth" )
strat.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
colnames(strat.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
strategy.avgNumberOfStocks <- sum(strat.EqualWeights$NumberOfStocks)/length(strat.EqualWeights$NumberOfStocks)
# ----
# assign a new working variable
strategy <- BRIC.strategy
# value weight returns
## calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
## calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
## calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
# TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
# return stats ----
# RETURNS ----
# per month
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.111509 %
# STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 37.155688
# SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.352880
# MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret) # -99.1467
# TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 26.831411 %
# INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.26754
# Turnover ----
library(reshape)
library(xts)
# strategy turnover ----
# get intermediate data frame
turnover_calc <- strategy
s_weights <- subset(turnover_calc,select= c("ym","Weight","Id"))
s_weights <-reshape(s_weights, idvar = "ym", timevar = "Id", direction = "wide")
s_weights <-as.xts(s_weights)
s_weights[is.na(s_weights)]=0
s_lead_weights <- as.data.frame(s_weights)
s_lead_weights <-s_lead_weights %>% mutate_all(lead)
as.data.frame(s_lead_weights)
s_lead_weights<-as.data.frame(s_lead_weights)
s_weights<-as.data.frame(s_weights)
s_turnover_weights<-as.data.frame(txns <- s_lead_weights - s_weights) #s_tunover_weights - stuff inside the bracker in the fromula
s_turnover_weights[is.na(s_turnover_weights)]=0
s_turnover_pattern <- as.data.frame(rowSums(abs(s_turnover_weights[,1:length(s_turnover_weights)])),order.by=index(s_turnover_weights))
colnames(s_turnover_pattern)[1] <- "one"
s_turnover_pattern<-as.data.frame(s_turnover_pattern)
strategy.turnover <- (sum(s_turnover_pattern$one) / (2*nrow(s_turnover_pattern)))
growth_BRA_ValueWeight <- c(strategy.retBricT,strategy.retExBricT,strategy.sdBricT,strategy.srBricT,strategy.mdBricT,strategy.teBricT,strategy.irBricT, strategy.avgNumberOfStocks, strategy.topTenBricT, strategy.turnover, nrow(strategy))
growth_BRA_ValueWeight
BRIC.strategy <- BRIC.maindata
## Value factor
## creating a large cap and high B/M ratio column (large cap value)
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# subsetting only value stocks (cutoff = median) Look up CUTOFF details
# Determine the value breakpoints
hlpvariable2 <- BRIC.maindata[month==7, .(median = quantile(BM , probs = c(0.5), na.rm=T)),by=year]
# Merge the value portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median,"Value",(ifelse(BM<=median,"Growth",NA)))]
# low vol breakpoints ----
# Determine the low_vol breakpoints based on big stocks only
hlpvariable2 <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
# Merge the low_vol portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
strat.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
colnames(strat.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
strategy.avgNumberOfStocks <- sum(strat.EqualWeights$NumberOfStocks)/length(strat.EqualWeights$NumberOfStocks)
# ----
# assign a new working variable
strategy <- BRIC.strategy
# value weight returns
## calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
## calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
## calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
# TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
# return stats ----
# RETURNS ----
# per month
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.111509 %
# STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 37.155688
# SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.352880
# MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret) # -99.1467
# TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 26.831411 %
# INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.26754
# Turnover ----
library(reshape)
library(xts)
# strategy turnover ----
# get intermediate data frame
turnover_calc <- strategy
s_weights <- subset(turnover_calc,select= c("ym","Weight","Id"))
s_weights <-reshape(s_weights, idvar = "ym", timevar = "Id", direction = "wide")
s_weights <-as.xts(s_weights)
s_weights[is.na(s_weights)]=0
s_lead_weights <- as.data.frame(s_weights)
s_lead_weights <-s_lead_weights %>% mutate_all(lead)
as.data.frame(s_lead_weights)
s_lead_weights<-as.data.frame(s_lead_weights)
s_weights<-as.data.frame(s_weights)
s_turnover_weights<-as.data.frame(txns <- s_lead_weights - s_weights) #s_tunover_weights - stuff inside the bracker in the fromula
s_turnover_weights[is.na(s_turnover_weights)]=0
s_turnover_pattern <- as.data.frame(rowSums(abs(s_turnover_weights[,1:length(s_turnover_weights)])),order.by=index(s_turnover_weights))
colnames(s_turnover_pattern)[1] <- "one"
s_turnover_pattern<-as.data.frame(s_turnover_pattern)
strategy.turnover <- (sum(s_turnover_pattern$one) / (2*nrow(s_turnover_pattern)))
lowVol_BRA_ValueWeight <- c(strategy.retBricT,strategy.retExBricT,strategy.sdBricT,strategy.srBricT,strategy.mdBricT,strategy.teBricT,strategy.irBricT, strategy.avgNumberOfStocks, strategy.topTenBricT, strategy.turnover, nrow(strategy))
lowVol_BRA_ValueWeight
BRIC.strategy <- BRIC.maindata
## Value factor
## creating a large cap and high B/M ratio column (large cap value)
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# subsetting only value stocks (cutoff = median) Look up CUTOFF details
# Determine the value breakpoints
hlpvariable2 <- BRIC.maindata[month==7, .(median = quantile(BM , probs = c(0.5), na.rm=T)),by=year]
# Merge the value portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median,"Value",(ifelse(BM<=median,"Growth",NA)))]
# low vol breakpoints ----
# Determine the low_vol breakpoints based on big stocks only
hlpvariable2 <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
# Merge the low_vol portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
strat.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
colnames(strat.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
strategy.avgNumberOfStocks <- sum(strat.EqualWeights$NumberOfStocks)/length(strat.EqualWeights$NumberOfStocks)
# ----
# assign a new working variable
strategy <- BRIC.strategy
# value weight returns
## calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
## calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
## calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
# TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
# return stats ----
# RETURNS ----
# per month
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.111509 %
# STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 37.155688
# SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.352880
# MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret) # -99.1467
# TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 26.831411 %
# INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.26754
# Turnover ----
library(reshape)
library(xts)
# strategy turnover ----
# get intermediate data frame
turnover_calc <- strategy
s_weights <- subset(turnover_calc,select= c("ym","Weight","Id"))
s_weights <-reshape(s_weights, idvar = "ym", timevar = "Id", direction = "wide")
s_weights <-as.xts(s_weights)
s_weights[is.na(s_weights)]=0
s_lead_weights <- as.data.frame(s_weights)
s_lead_weights <-s_lead_weights %>% mutate_all(lead)
as.data.frame(s_lead_weights)
s_lead_weights<-as.data.frame(s_lead_weights)
s_weights<-as.data.frame(s_weights)
s_turnover_weights<-as.data.frame(txns <- s_lead_weights - s_weights) #s_tunover_weights - stuff inside the bracker in the fromula
s_turnover_weights[is.na(s_turnover_weights)]=0
s_turnover_pattern <- as.data.frame(rowSums(abs(s_turnover_weights[,1:length(s_turnover_weights)])),order.by=index(s_turnover_weights))
colnames(s_turnover_pattern)[1] <- "one"
s_turnover_pattern<-as.data.frame(s_turnover_pattern)
strategy.turnover <- (sum(s_turnover_pattern$one) / (2*nrow(s_turnover_pattern)))
Mom_BRA_ValueWeight <- c(strategy.retBricT,strategy.retExBricT,strategy.sdBricT,strategy.srBricT,strategy.mdBricT,strategy.teBricT,strategy.irBricT, strategy.avgNumberOfStocks, strategy.topTenBricT, strategy.turnover, nrow(strategy))
Mom_BRA_ValueWeight
differentStrategies.BRA <- rbind(full_BRA_Benchmark,full_BRA_ValueWeight,growthLowVol_BRA_ValueWeight,growthMom_BRA_ValueWeight,lowVolMom_BRA_ValueWeight,growth_BRA_ValueWeight,lowVol_BRA_ValueWeight,Mom_BRA_ValueWeight)
differentStrategies.BRA <- as.data.frame(differentStrategies.BRA)
colnames_Strategy_Statics<- c("Return","ExcessReturn","Volatility","SharpeRatio","MaxDrawdown","TrackingError","InformationRatio","#NoOfStocks","PortfolioConcentration","Turnover","NumberOfRows")
colnames(differentStrategies.BRA) <- colnames_Strategy_Statics
# export
save(factors_BRA,file = "factors_BRA.RData")
factors_BRA <- factors
differentStrategies.BRA <- rbind(full_BRA_Benchmark,full_BRA_ValueWeight,growthLowVol_BRA_ValueWeight,growthMom_BRA_ValueWeight,lowVolMom_BRA_ValueWeight,growth_BRA_ValueWeight,lowVol_BRA_ValueWeight,Mom_BRA_ValueWeight)
differentStrategies.BRA <- as.data.frame(differentStrategies.BRA)
colnames_Strategy_Statics<- c("Return","ExcessReturn","Volatility","SharpeRatio","MaxDrawdown","TrackingError","InformationRatio","#NoOfStocks","PortfolioConcentration","Turnover","NumberOfRows")
colnames(differentStrategies.BRA) <- colnames_Strategy_Statics
# export
save(factors_BRA,file = "factors_BRA.RData")
save(differentStrategies.BRA,file = "differentStrategies_BRA.RData")
differentStrategies.BRIC$Region <- "BRIC"
View(differentStrategies.BRIC)
differentStrategies.BRIC$Region <- "BRIC"
differentStrategies.CHN$Region <- "CHN"
differentStrategies.RUS$Region <- "RUS"
differentStrategies.IND$Region <- "IND"
differentStrategies.BRA$Region <- "BRA"
View(differentStrategies.BRIC)
megaview <- rbind(differentStrategies.BRIC,differentStrategies.CHN,differentStrategies.RUS,differentStrategies.IND,differentStrategies.BRA)
View(megaview)
differentStrategies.all <- rbind(differentStrategies.BRIC,differentStrategies.CHN,differentStrategies.RUS,differentStrategies.IND,differentStrategies.BRA)
save(differentStrategies.all,file = "differentStrategies_all.RDATA")
View(differentStrategies.all)

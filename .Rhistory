Robust = (Small.Robust + Big.Robust)/2,
Weak = (Small.Weak + Big.Weak)/2,
RMW = Robust - Weak
)
portfolio_rmw <- as.data.table(portfolio_rmw)
portfolio_cma <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.ac)] %>% # this operator nests functions
group_by(Date,SIZE_INVESTMENT) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RMRF,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_INVESTMENT,ret.port) %>% # create one column for each group
mutate(
Small = (Small.Aggressive + Small.Neutral + Small.Conservative)/3, # just exemplary
Big = (Big.Aggressive + Big.Neutral + Big.Conservative)/3,
SMB_CMA = Small-Big,
Aggressive = (Small.Aggressive + Big.Aggressive)/2,
Conservative = (Small.Conservative + Big.Conservative)/2,
CMA = Conservative - Aggressive
)
portfolio_cma <- as.data.table(portfolio_cma)
factors <- inner_join(x = portfolio_hml, y = portfolio_rmw, by = "Date")
factors <- inner_join(x = factors, y = portfolio_cma, by = "Date")
factors <- subset(factors, select = c("Date","CMA","HML","RMW","SMB_HML","SMB_RMW","SMB_CMA"))
factors$SMB <- ((factors$SMB_HML + factors$SMB_RMW + factors$SMB_CMA)/3)
factors <- subset(factors, select = c("Date","CMA","HML","RMW","SMB"))
summary(factors)
# value weight returns
## calculate monthly market value over all stocks
BRIC.strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = BRIC.benchmark, FUN = sum)
colnames(BRIC.strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
BRIC.strategy <- inner_join(x = BRIC.strategy, y = BRIC.strategy.valueWeights, by = "ym")
## calculate value weight
BRIC.strategy$ValueWeight <- BRIC.strategy$LMV.USD/BRIC.strategy$TotalValue
## calculate value weight excess return / return
BRIC.strategy$vwRet <- BRIC.strategy$ValueWeight*BRIC.strategy$RET.USD
BRIC.strategy$vwExRet <- BRIC.strategy$ValueWeight * BRIC.strategy$RMRF
View(BRIC.strategy)
strategy.retBricM <- aggregate(cbind(RET.USD,RMRF) ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
View(strategy.retBricM)
strategy.retBricM <- aggregate(cbind(RET.USD,RMRF) ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
View(strategy.retBricM)
strategy.retBricM <- aggregate(cbind(vwRet,vwExRet) ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
View(strategy.retBricM)
strategy.retBricM <- aggregate(cbind(vwRet,vwExRet) ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
View(strategy.retBricM)
strategy.retBricM <- aggregate(cbind(RET.USD,RMRF) ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
View(strategy.retBricM)
strategy.retBricM.vw <- aggregate(cbind(vwRet,vwExRet) ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
View(strategy.retBricM.vw)
strategy.retBricY.vw <- aggregate(cbind(vwRet,vwExRet) ~ hcjun, data = strategy.retBricM.vw,FUN = mean)
View(strategy.retBricY.vw)
strategy.retBricY$vwRet <- strategy.retBricY$vwRet * 12
strategy.retBricY.vw$vwRet <- strategy.retBricY.vw$vwRet * 12
View(strategy.retBricY.vw)
View(strategy.retBricY)
View(strategy.retBricM.vw)
strategy.retBricM.vw <- aggregate(TotalValue ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
View(strategy.retBricM.vw)
strategy.retBricM.vw <- aggregate(ValueWeight ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
View(strategy.retBricM.vw)
strategy.retBricM.vw <- aggregate(ValueWeight ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
View(strategy.retBricM.vw)
strategy.retBricM.vw <- aggregate(ValueWeight ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
View(strategy.retBricM.vw)
View(BRIC.strategy)
View(BRIC.strategy.valueWeights)
BRIC.strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = BRIC.strategy, FUN = sum)
colnames(BRIC.strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
BRIC.strategy <- inner_join(x = BRIC.strategy, y = BRIC.strategy.valueWeights, by = "ym")
## calculate value weight
BRIC.strategy$ValueWeight <- BRIC.strategy$LMV.USD/BRIC.strategy$TotalValue
BRIC.strategy <- BRIC.maindata
colnames(BRIC.strategy)
## Value factor
## creating a large cap and high B/M ratio column (large cap value)
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# subsetting only value stocks (cutoff = median) Look up CUTOFF details
# Determine the value breakpoints
hlpvariable2 <- BRIC.maindata[month==7, .(median = quantile(BM , probs = c(0.5), na.rm=T)),by=year]
# Merge the value portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median,"Value",(ifelse(BM<=median,"Growth",NA)))]
table(BRIC.strategy$pf.value)
dim(BRIC.strategy)
# Determine the low_vol breakpoints based on big stocks only
hlpvariable2 <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
# Merge the low_vol portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
table(BRIC.strategy$pf.low_vol)
dim(BRIC.strategy)
# filtering for growth stocks
BRIC.strategy <- subset(BRIC.strategy, pf.value == "Growth" )
# filtering for lowVol stocks
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
# filtering for winner stocks
BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
dim(BRIC.strategy)
summary(BRIC.strategy)
# preparation
# value weight returns
## calculate monthly market value over all stocks
BRIC.strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = BRIC.strategy, FUN = sum)
colnames(BRIC.strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
BRIC.strategy <- inner_join(x = BRIC.strategy, y = BRIC.strategy.valueWeights, by = "ym")
## calculate value weight
BRIC.strategy$ValueWeight <- BRIC.strategy$LMV.USD/BRIC.strategy$TotalValue
## calculate value weight excess return / return
BRIC.strategy$vwRet <- BRIC.strategy$ValueWeight*BRIC.strategy$RET.USD
BRIC.strategy$vwExRet <- BRIC.strategy$ValueWeight * BRIC.strategy$RMRF
# RETURNS
# per month
strategy.retBricM.vw <- aggregate(ValueWeight ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
# per year
strategy.retBricY.vw <- aggregate(cbind(vwRet,vwExRet) ~ hcjun, data = strategy.retBricM.vw,FUN = mean)
View(strategy.retBricM.vw)
strategy.retBricM <- aggregate(ValueWeight ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
View(strategy.retBricM)
strategy.retBricM <- aggregate(cbind(vwRet,vwExRet) ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
View(strategy.retBricM)
strategy.retBricY <- aggregate(cbind(vwRet,vwExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
View(strategy.retBricY)
# RETURNS
# per month
strategy.retBricM <- aggregate(cbind(RET.USD,RMRF) ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
# per year
strategy.retBricY <- aggregate(cbind(RET.USD,RMRF) ~ hcjun, data = BRIC.strategy,FUN = mean)
# annualisation
strategy.retBricY$RET.USD <- strategy.retBricY$RET.USD * 12
strategy.retBricY$RMRF <- strategy.retBricY$RMRF * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$RET.USD) # 15.59512 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$RMRF) # 13.315869 %
# STANDARD DEVIATION
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$RET.USD) # 35.63418
# SHARP RATIO
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.3736825
# MAX DRAWDOWN
v <- cumprod(1 + BRIC.strategy$RET.USD/100)  # returns
1 - v/cummax(v)         ## drawdown
max(1 - v/cummax(v))    ## max. drawdown
# TRACKING ERROR
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "RET.USD_portfolio"
colnames(strategy_benchmark)[3] <- "RMRF_portfolio"
colnames(strategy_benchmark)[4] <- "RET.USD_benchmark"
colnames(strategy_benchmark)[5] <- "RMRF_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$RET.USD_portfolio - strategy_benchmark$RET.USD_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 20.83362 %
# INFROMATION RATIO
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.35782
BRIC.strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = BRIC.strategy, FUN = sum)
colnames(BRIC.strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
BRIC.strategy <- inner_join(x = BRIC.strategy, y = BRIC.strategy.valueWeights, by = "ym")
## calculate value weight
BRIC.strategy$ValueWeight <- BRIC.strategy$LMV.USD/BRIC.strategy$TotalValue
BRIC.strategy$vwRet <- BRIC.strategy$ValueWeight*BRIC.strategy$RET.USD
BRIC.strategy$vwExRet <- BRIC.strategy$ValueWeight * BRIC.strategy$RMRF
strategy.retBricM.vw <- aggregate(cbind(vwRet,vwExRet) ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
# per year
strategy.retBricY.vw <- aggregate(cbind(vwRet,vwExRet) ~ hcjun, data = strategy.retBricM.vw,FUN = mean)
View(strategy.retBricY)
View(strategy.retBricY.vw)
strategy.retBricM <- aggregate(cbind(vwRet,vwExRet) ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(vwRet,vwExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$vwRet <- strategy.retBricY$vwRet * 12
strategy.retBricY$RMRF <- strategy.retBricY$RMRF * 12
strategy.retBricM <- aggregate(cbind(vwRet,vwExRet) ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(vwRet,vwExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$vwRet <- strategy.retBricY$vwRet * 12
strategy.retBricY$vwExRet <- strategy.retBricY$vwExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$vwRet) # 15.59512 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$vwExRet) # 13.315869 %
strategy.sdBricT <- sd(strategy.retBricY$vwRet) # 35.63418
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.3736825
# preparation
# value weight returns
## calculate monthly market value over all stocks
BRIC.strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = BRIC.strategy, FUN = sum)
colnames(BRIC.strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
BRIC.strategy <- inner_join(x = BRIC.strategy, y = BRIC.strategy.valueWeights, by = "ym")
## calculate value weight
BRIC.strategy$ValueWeight <- BRIC.strategy$LMV.USD/BRIC.strategy$TotalValue
## calculate value weight excess return / return
BRIC.strategy$vwRet <- BRIC.strategy$ValueWeight*BRIC.strategy$RET.USD
BRIC.strategy$vwExRet <- BRIC.strategy$ValueWeight * BRIC.strategy$RMRF
# RETURNS
# per month
strategy.retBricM <- aggregate(cbind(vwRet,vwExRet) ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(vwRet,vwExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$vwRet <- strategy.retBricY$vwRet * 12
strategy.retBricY$vwExRet <- strategy.retBricY$vwExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$vwRet) # 16.007787 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$vwExRet) # 13.790204 %
# STANDARD DEVIATION
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$vwRet) # 35.978402
# SHARP RATIO
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.3832911
# MAX DRAWDOWN
td
# preparation
# value weight returns
## calculate monthly market value over all stocks
BRIC.strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = BRIC.strategy, FUN = sum)
colnames(BRIC.strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
BRIC.strategy <- inner_join(x = BRIC.strategy, y = BRIC.strategy.valueWeights, by = "ym")
## calculate value weight
BRIC.strategy$ValueWeight <- BRIC.strategy$LMV.USD/BRIC.strategy$TotalValue
View(BRIC.strategy)
BRIC.strategy.valueWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN = sum)
BRIC.strategy.valueWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
View(BRIC.strategy.valueWeights)
BRIC.strategy.valueWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=length(unique(x)))
BRIC.strategy.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
BRIC.strategy.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
colnames(BRIC.strategy.EqualWeights)[2] <- "NumberOfStocks"
BRIC.strategy.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
colnames(BRIC.strategy.EqualWeights)[2] <- "NumberOfStocks"
## join value weights to stocks
BRIC.strategy <- inner_join(x = BRIC.strategy, y = BRIC.strategy.EqualWeights, by = "ym")
## calculate value weight
BRIC.strategy$Weight <- BRIC.strategy$LMV.USD/BRIC.strategy$NumberOfStocks
## calculate value weight excess return / return
BRIC.strategy$wRet <- BRIC.strategy$Weight*BRIC.strategy$RET.USD
BRIC.strategy$wExRet <- BRIC.strategy$Weight * BRIC.strategy$RMRF
# RETURNS
# per month
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = BRIC.strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.59512 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.315869 %
# STANDARD DEVIATION
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 35.63418
# SHARP RATIO
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.3736825
# MAX DRAWDOWN
v <- cumprod(1 + BRIC.strategy$wRet/100)  # returns
1 - v/cummax(v)         ## drawdown
max(1 - v/cummax(v))    ## max. drawdown
# TRACKING ERROR
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_portfolio"
colnames(strategy_benchmark)[3] <- "wExRet_portfolio"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_portfolio - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 20.83362 %
# INFROMATION RATIO
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.35782
View(strategy.retBricY)
View(BRIC.strategy)
BRIC.strategy <- BRIC.maindata
colnames(BRIC.strategy)
## Value factor
## creating a large cap and high B/M ratio column (large cap value)
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# subsetting only value stocks (cutoff = median) Look up CUTOFF details
# Determine the value breakpoints
hlpvariable2 <- BRIC.maindata[month==7, .(median = quantile(BM , probs = c(0.5), na.rm=T)),by=year]
# Merge the value portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median,"Value",(ifelse(BM<=median,"Growth",NA)))]
table(BRIC.strategy$pf.value)
dim(BRIC.strategy)
# Determine the low_vol breakpoints based on big stocks only
hlpvariable2 <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
# Merge the low_vol portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
table(BRIC.strategy$pf.low_vol)
dim(BRIC.strategy)
# filtering for growth stocks
BRIC.strategy <- subset(BRIC.strategy, pf.value == "Growth" )
# filtering for lowVol stocks
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
# filtering for winner stocks
BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
dim(BRIC.strategy)
summary(BRIC.strategy)
# assign a new working variable
strategy <- BRIC.strategy
strategy.EqualWeights <- aggregate(Id ~ ym, data = strategy, FUN=function(x) length(unique(x)))
colnames(strategy.EqualWeights)[2] <- "NumberOfStocks"
## join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.EqualWeights, by = "ym")
## calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$NumberOfStocks
## calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RMRF
# RETURNS
# per month
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.59512 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.315869 %
# STANDARD DEVIATION
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 35.63418
# SHARP RATIO
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.3736825
# MAX DRAWDOWN
v <- cumprod(1 + strategy$wRet/100)  # returns
1 - v/cummax(v)         ## drawdown
max(1 - v/cummax(v))    ## max. drawdown
# TRACKING ERROR
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_portfolio"
colnames(strategy_benchmark)[3] <- "wExRet_portfolio"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_portfolio - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 20.83362 %
# INFROMATION RATIO
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.35782
View(strategy.retBricY)
View(strategy.retBricM)
View(strategy)
# assign a new working variable
strategy <- BRIC.strategy
strategy.EqualWeights <- aggregate(Id ~ ym, data = strategy, FUN=function(x) length(unique(x)))
colnames(strategy.EqualWeights)[2] <- "NumberOfStocks"
## join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.EqualWeights, by = "ym")
## calculate value weight
strategy$Weight <- 1/strategy$NumberOfStocks
## calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RMRF
View(strategy)
# RETURNS
# per month
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.59512 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.315869 %
# STANDARD DEVIATION
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 35.63418
# SHARP RATIO
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.3736825
# MAX DRAWDOWN
v <- cumprod(1 + strategy$wRet/100)  # returns
1 - v/cummax(v)         ## drawdown
max(1 - v/cummax(v))    ## max. drawdown
# TRACKING ERROR
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_portfolio"
colnames(strategy_benchmark)[3] <- "wExRet_portfolio"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_portfolio - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 20.83362 %
# INFROMATION RATIO
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.35782
View(strategy.retBricY)
test <- aggregate(cbind(RET.USD,RMRF) ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
View(test)
View(strategy.retBricM)
View(strategy_benchmark)
View(strategy_benchmark)
View(benchmark.retBricY)
View(strategy.retBricY)
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
strategy.retBricTe <- mean(strategy.retBricY$RET.USD)
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
strategy.retBricTe <- mean(strategy$RET.USD)
strategy.retBricTe <- mean(strategy$RET.USD)*12
strategy.retBricTe <- mean(strategy$RET.USD)*6
strategy.retBricTe <- mean(strategy$RET.USD)*7
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
strategy.retBricM2 <- aggregate(cbind(RET.USD,wExRet) ~ ym + hcjun, data = strategy,FUN = mean)
View(strategy.retBricM2)
View(strategy.retBricM)
test <- aggregate(cbind(RET.USD,RMRF) ~ hcjun, data = BRIC.strategy,FUN = mean)
test <- aggregate(cbind(RET.USD,RMRF) ~ hcjun, data = BRIC.strategy,FUN = mean)
test$RET.USD <- test$RET.USD*12
test$RMRF <- test$RMRF*12
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
test <- aggregate(cbind(RET.USD,RMRF) ~ hcjun, data = BRIC.strategy,FUN = mean)
test$RET.USD <- test$RET.USD*12
test$RMRF <- test$RMRF*12
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
testooo <- mean(test$RET.USD)
View(strategy.retBricY)
View(test)
View(strategy.retBricM)
test <- aggregate(cbind(RET.USD,RMRF) ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
test$RET.USD <- test$RET.USD*12
test$RMRF <- test$RMRF*12
test <- aggregate(cbind(RET.USD,RMRF) ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
View(test)
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
View(strategy.retBricM)
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
test <- aggregate(cbind(RET.USD,RMRF) ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
testi <- aggregate(cbind(RET.USD,RMRF) ~ hcjun, data = test,FUN = mean)
testi$RET.USD <- test$RET.USD*12
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
test <- aggregate(cbind(RET.USD,RMRF) ~ ym + hcjun, data = BRIC.strategy,FUN = mean)
testi <- aggregate(cbind(RET.USD,RMRF) ~ hcjun, data = test,FUN = mean)
testi$RET.USD <- testi$RET.USD*12
testi$RMRF <- testi$RMRF*12
View(testi)
testi <- aggregate(cbind(RET.USD,RMRF) ~ hcjun, data = BRIC.strategy,FUN = mean)
testi$RET.USD <- testi$RET.USD*12
testi$RMRF <- testi$RMRF*12
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
# RETURNS
# per month
strategy.retCountryM <- aggregate(cbind(wRet,wExRet) ~ country.x + ym + hcjun, data = strategy,FUN = sum)
# per year
strategy.retCountryY <- aggregate(cbind(wRet,wExRet) ~ country.x + hcjun, data = strategy.retCountryM,FUN = mean)
# annualisation
strategy.retCountryY$wRet <- strategy.retCountryY$wRet * 12
strategy.retCountryY$wExRet <- strategy.retCountryY$wExRet * 12
# mean excess return and return of whole period
strategy.retCountryT <- aggregate(cbind(wRet,wExRet) ~ country.x, data = strategy.retCountryY,FUN = mean)
# STANDARD DEVIATION
strategy.sdCountryT <- aggregate(wRet ~ country.x, data = strategy.retCountryY, FUN = sd)
colnames(strategy.sdCountryT)[2] <- "SDwholeperiod"
# SHARP RATIO
strategy.srCountryT = inner_join(x = strategy.retCountryT, y = strategy.sdCountryT, by = "country.x" )
strategy.srCountryT$SR <- strategy.srCountryT$wExRet/strategy.srCountryT$SDwholeperiod
# MAX DRAWDOWN
# td
# TRACKING ERROR
# merge portfolio returns and benchmark returns
strategy_benchmark_c <- inner_join(x = strategy.retCountryY, y = benchmark.retCountryY, by = c("hcjun","country.x"))
colnames(strategy_benchmark_c)[3] <- "wRet_portfolio"
colnames(strategy_benchmark_c)[4] <- "wExRet_portfolio"
colnames(strategy_benchmark_c)[5] <- "wRet_benchmark"
colnames(strategy_benchmark_c)[6] <- "wExRet_benchmark"
strategy_benchmark_c$pf_activeReturn <- strategy_benchmark_c$wRet_portfolio - strategy_benchmark_c$wRet_benchmark
strategy.teCountryT <- aggregate(pf_activeReturn ~ country.x, data = strategy_benchmark_c, FUN = sd)
colnames(strategy.teCountryT)[2] <- "TrackingError"
# INFROMATION RATIO
strategy.irCountryT_intermediate <- aggregate(pf_activeReturn ~ country.x, data = strategy_benchmark_c, FUN = mean)
colnames(strategy.irCountryT_intermediate)[2] <- "meanActiveRet"
strategy.irCountryT <- inner_join(x = strategy.teCountryT, y = strategy.irCountryT_intermediate, by = "country.x")
strategy.irCountryT$InformationRatio <- strategy.irCountryT$meanActiveRet / strategy.irCountryT$`Tracking Error`
View(strategy.retCountryT)
View(strategy.retCountryM)
strategy.irCountryT$InformationRatio <- strategy.irCountryT$meanActiveRet / strategy.irCountryT$TrackingError

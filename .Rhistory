drop_na(WC02999)
# delete rows with no TotalAssetsBefore
BRIC.yearly <- BRIC.yearly %>%
drop_na(TotalAssetsBefore)
# 1.3.4 operating profits ----
# "To have a valid value, at least one of cost components cost of goods sold, selling, general and administrative expenses, or interest expense must be non-missing." (Hanauer, 2019, p. 284) --> if one of these values is missing, we must delete these rows WC01001,WC01051,WC01101,WC01251
# delete rows where ALL 4 columns are NA
BRIC.yearly <- filter(BRIC.yearly,!is.na(WC01001) | !is.na(WC01051) | !is.na(WC01101) | !is.na(WC01251))
# replace all na's in this 4 columns with 0
BRIC.yearly$WC01001 <- BRIC.yearly$WC01001 %>% replace_na(0)
BRIC.yearly$WC01051 <- BRIC.yearly$WC01051 %>% replace_na(0)
BRIC.yearly$WC01101 <- BRIC.yearly$WC01101 %>% replace_na(0)
BRIC.yearly$WC01251 <- BRIC.yearly$WC01251 %>% replace_na(0)
# calculate operating profits (Hanauer, 2019, p.284)
BRIC.yearly$OperatingProfits <- (BRIC.yearly$WC01001 - BRIC.yearly$WC01051 - BRIC.yearly$WC01101 - BRIC.yearly$WC01251)
# 1.3.5 minimise data frame ----
# for BRIC.yearly we keep: Id, country, ICBSUC, YEAR, BookEquity, OperatingProfits and total assets
# Note: WC07201 is not used, as our MV should be the MV from the monthly data for 06.y !
BRIC.yearly <- subset(BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","BookEquity","OperatingProfits","WC02999","TotalAssetsBefore"))
# we rename WC02999 to total assets
colnames(BRIC.yearly)[7] <- "TotalAssets"
# 1.3.6 create a help column hcdec (1 year lag) ----
BRIC.yearly$hcdec <- BRIC.yearly$YEAR + 1
# scaling
BRIC.yearly$BookEquity <- BRIC.yearly$BookEquity*1000
BRIC.yearly$OperatingProfits <- BRIC.yearly$OperatingProfits*1000
BRIC.yearly$TotalAssets <- BRIC.yearly$TotalAssets*1000
BRIC.yearly$TotalAssetsBefore <- BRIC.yearly$TotalAssetsBefore *1000
BRIC.maindata <- inner_join(x = BRIC.monthly,y = BRIC.yearly, by = c("Id","hcjun" = "hcdec"))
# Add a B/M column
BRIC.maindata$BM_Devil <- BRIC.maindata$BookEquity / BRIC.maindata$MV
# Add a OP/BE column
BRIC.maindata$OPBE <- BRIC.maindata$OperatingProfits / BRIC.maindata$BookEquity
# Add a AssetGrowth column
BRIC.maindata$AssetGrowth <- ((BRIC.maindata$TotalAssets - BRIC.maindata$TotalAssetsBefore)/BRIC.maindata$TotalAssetsBefore)
# we only look at data after July 1996
BRIC.maindata <- subset(BRIC.maindata, hcjun >= "1996")
BRIC.maindata$BM <- BRIC.maindata$BookEquity / BRIC.maindata$MV.December
#summary(BRIC.maindata)
# 2.2.1 Create breakpoints ----
setorder(BRIC.maindata,Date,-MV.USD.June)
hlpvariable <-  BRIC.maindata[month==7 & !is.na(MV.USD.June),
.(pf.size = ifelse((cumsum(MV.USD.June)/sum(MV.USD.June))>=0.97,"Micro",ifelse((cumsum(MV.USD.June)/sum(MV.USD.June))>=0.90,"Small","Big")),Id),
by=year]
# Merge the size portfolio allocation back from July Y to June Y+1
BRIC.maindata <- merge(BRIC.maindata,hlpvariable,
by.x=c("hcjun","Id"),
by.y=c("year","Id"),
all.x=T)
# delete NA's (only about 1000 rows)
BRIC.maindata <- na.omit(BRIC.maindata,cols = "pf.size")
# 2.2.2 Delete micro stocks ----
BRIC.maindata <- filter(BRIC.maindata,BRIC.maindata$pf.size != "Micro")
# 3.1.1 Benchmark ----
# create copy
BRIC.benchmark <- BRIC.maindata
# filter on pf.size
BRIC.benchmark <- subset(BRIC.benchmark, pf.size == "Big" )
# value weight returns
## calculate monthly market value over all stocks
BRIC.benchmark.valueWeights <- aggregate(LMV.USD ~ ym, data = BRIC.benchmark, FUN = sum)
colnames(BRIC.benchmark.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
BRIC.benchmark <- inner_join(x = BRIC.benchmark, y = BRIC.benchmark.valueWeights, by = "ym")
## calculate value weight
BRIC.benchmark$ValueWeight <- BRIC.benchmark$LMV.USD/BRIC.benchmark$TotalValue
## calculate value weight excess return / return
BRIC.benchmark$wRet <- BRIC.benchmark$ValueWeight*BRIC.benchmark$RET.USD
BRIC.benchmark$wExRet <- BRIC.benchmark$ValueWeight * BRIC.benchmark$RiRF
# per month
benchmark.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = BRIC.benchmark,FUN = sum)
# per year
benchmark.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = benchmark.retBricM,FUN = mean)
## annualise
benchmark.retBricY$wRet <- benchmark.retBricY$wRet*12
benchmark.retBricY$wExRet <- benchmark.retBricY$wExRet*12
# per country
benchmark.retCountryM <- aggregate(cbind(wRet,wExRet) ~ country.x + ym + hcjun, data = BRIC.benchmark,FUN = sum)
# per year
benchmark.retCountryY <- aggregate(cbind(wRet,wExRet) ~ country.x + hcjun, data = benchmark.retCountryM,FUN = mean)
## annualise
benchmark.retCountryY$wRet <- benchmark.retCountryY$wRet*12
benchmark.retCountryY$wExRet <- benchmark.retCountryY$wExRet*12
# single dataframe
benchmark_BRIC <- inner_join(benchmark.retBricY,benchmark.retBricM,by = "hcjun")
benchmark_Country <- inner_join(benchmark.retCountryY,benchmark.retCountryM,by = c("hcjun","country.x"))
# rename columns
colnames(benchmark_BRIC)[2] <- "YearlyReturn"
colnames(benchmark_BRIC)[3] <- "YearlyExcessReturn"
colnames(benchmark_BRIC)[5] <- "MonthlyReturn"
colnames(benchmark_BRIC)[6] <- "MonthlyExcessReturn"
colnames(benchmark_Country)[3] <- "YearlyReturn"
colnames(benchmark_Country)[4] <- "YearlyExcessReturn"
colnames(benchmark_Country)[6] <- "MonthlyReturn"
colnames(benchmark_Country)[7] <- "MonthlyExcessReturn"
# 3.1.2 Market (Excess) Return ----
# create copy
BRIC.market <- BRIC.maindata
# value weight returns
## calculate monthly market value over all stocks
BRIC.market.valueWeights <- aggregate(LMV.USD ~ ym, data = BRIC.market, FUN = sum)
colnames(BRIC.market.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
BRIC.market <- inner_join(x = BRIC.market, y = BRIC.market.valueWeights, by = "ym")
## calculate value weight
BRIC.market$ValueWeight <- BRIC.market$LMV.USD/BRIC.market$TotalValue
## calculate value weight excess return / return
BRIC.market$wRet <- BRIC.market$ValueWeight*BRIC.market$RET.USD
BRIC.market$wExRet <- BRIC.market$ValueWeight * BRIC.market$RiRF
# per month
market.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = BRIC.market,FUN = sum)
# per year
market.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = market.retBricM,FUN = mean)
## annualise
market.retBricY$wRet <- market.retBricY$wRet*12
market.retBricY$wExRet <- market.retBricY$wExRet*12
# per country
market.retCountryM <- aggregate(cbind(wRet,wExRet) ~ country.x + ym + hcjun, data = BRIC.market,FUN = sum)
# per year
market.retCountryY <- aggregate(cbind(wRet,wExRet) ~ country.x + hcjun, data = market.retCountryM,FUN = mean)
## annualise
market.retCountryY$wRet <- market.retCountryY$wRet*12
market.retCountryY$wExRet <- market.retCountryY$wExRet*12
# single dataframe
market_BRIC <- inner_join(market.retBricY,market.retBricM,by = "hcjun")
market_Country <- inner_join(market.retCountryY,market.retCountryM,by = c("hcjun","country.x"))
# rename columns
colnames(market_BRIC)[2] <- "YearlyReturn"
colnames(market_BRIC)[3] <- "YearlyExcessReturn"
colnames(market_BRIC)[5] <- "MonthlyReturn"
colnames(market_BRIC)[6] <- "MonthlyExcessReturn"
colnames(market_Country)[3] <- "YearlyReturn"
colnames(market_Country)[4] <- "YearlyExcessReturn"
colnames(market_Country)[6] <- "MonthlyReturn"
colnames(market_Country)[7] <- "MonthlyExcessReturn"
# 3.2.1 HML: Determine B/M breakpoints ----
# Determine the B/M breakpoints based on big stocks only
hlpvariable2 <- BRIC.maindata[month==7 & !is.na(BM) & pf.size=="Big", .(bm_bb30 = quantile(BM , probs = c(0.3), na.rm=T),
bm_bb70 = quantile(BM , probs = c(0.7), na.rm=T)),by=year]
# Merge the B/M portfolio allocation back from July Y to June Y+1
BRIC.maindata <- merge(BRIC.maindata,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.maindata[ , pf.bm := ifelse(BM>bm_bb70,"High",ifelse((BM<=bm_bb70 & BM>bm_bb30),"Neutral",ifelse(BM<=bm_bb30,"Low",NA)))]
BRIC.maindata[, SIZE_VALUE := paste0(pf.size,".",pf.bm)]
# 3.2.2 HML_Devil: Determine B/M (recent) breakpoints ----
# Determine the B/M_Devil breakpoints based on big stocks only
hlpvariable2 <- BRIC.maindata[month==7 & !is.na(BM_Devil) & pf.size=="Big", .(bmdevil_bb30 = quantile(BM_Devil , probs = c(0.3), na.rm=T),
bmdevil_bb70 = quantile(BM_Devil , probs = c(0.7), na.rm=T)),by=year]
# Merge the B/M_Devil portfolio allocation back from July Y to June Y+1
BRIC.maindata <- merge(BRIC.maindata,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.maindata[ , pf.bmdevil := ifelse(BM_Devil>bmdevil_bb70,"High",ifelse((BM_Devil<=bmdevil_bb70 & BM_Devil>bmdevil_bb30),"Neutral",ifelse(BM_Devil<=bmdevil_bb30,"Low",NA)))]
BRIC.maindata[, SIZE_VALUE_D := paste0(pf.size,".",pf.bmdevil)]
# 3.2.3 RMW: Determine OP/BE breakpoints ----
# Determine the OP/BE breakpoints based on big stocks only
hlpvariable2 <- BRIC.maindata[month==7 & !is.na(OPBE) & pf.size=="Big", .(opbe_bb30 = quantile(OPBE , probs = c(0.3), na.rm=T),
opbe_bb70 = quantile(OPBE , probs = c(0.7), na.rm=T)),by=year]
# Merge the OP/BE portfolio allocation back from July Y to June Y+1
BRIC.maindata <- merge(BRIC.maindata,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
# 3 OP/BE brackets: Robust, Neutral and Weak
BRIC.maindata[ , pf.opbe := ifelse(OPBE>opbe_bb70,"Robust",ifelse((OPBE<=opbe_bb70 & OPBE>opbe_bb30),"Neutral",ifelse(OPBE<=opbe_bb30,"Weak",NA)))]
BRIC.maindata[, SIZE_PROFITABILITY := paste0(pf.size,".",pf.opbe)]
# 3.2.4 CMA: Determine Asset Change Breakpoints ----
# Determine the AC breakpoints based on big stocks only
hlpvariable2 <- BRIC.maindata[month==7 & !is.na(AssetGrowth) & pf.size=="Big", .(ac_bb30 = quantile(AssetGrowth , probs = c(0.3), na.rm=T),
ac_bb70 = quantile(AssetGrowth , probs = c(0.7), na.rm=T)),by=year]
# Merge the AC portfolio allocation back from July Y to June Y+1
BRIC.maindata <- merge(BRIC.maindata,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
# 3 investment brackets: Aggressive, neutral and conservative
BRIC.maindata[ , pf.ac := ifelse(AssetGrowth>ac_bb70,"Aggressive",ifelse((AssetGrowth<=ac_bb70 & AssetGrowth>ac_bb30),"Neutral",ifelse(AssetGrowth<=ac_bb30,"Conservative",NA)))]
BRIC.maindata[, SIZE_INVESTMENT := paste0(pf.size,".",pf.ac)]
# HML ----
portfolio_hml <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.bm)] %>% # this operator nests functions
group_by(ym,SIZE_VALUE) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_VALUE,ret.port) %>% # create one column for each group
mutate(
Small = (Small.High + Small.Neutral + Small.Low)/3, # just exemplary
Big = (Big.High + Big.Neutral + Big.Low)/3,
SMB_HML = Small-Big,
High = (Small.High + Big.High)/2,
Low = (Small.Low + Big.Low)/2,
HML = High-Low
)
portfolio_hml <- as.data.table(portfolio_hml)
# HML_Devil ----
portfolio_hmldevil <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.bmdevil)] %>% # this operator nests functions
group_by(ym,SIZE_VALUE_D) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_VALUE_D,ret.port) %>% # create one column for each group
mutate(
Small = (Small.High + Small.Neutral + Small.Low)/3, # just exemplary
Big = (Big.High + Big.Neutral + Big.Low)/3,
SMB_HML_DEVIL = Small-Big,
High = (Small.High + Big.High)/2,
Low = (Small.Low + Big.Low)/2,
HML_DEVIL = High-Low
)
portfolio_hmldevil <- as.data.table(portfolio_hmldevil)
# RMW ----
portfolio_rmw <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.opbe)] %>% # this operator nests functions
group_by(ym,SIZE_PROFITABILITY) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_PROFITABILITY,ret.port) %>% # create one column for each group
mutate(
Small = (Small.Robust + Small.Neutral + Small.Weak)/3, # just exemplary
Big = (Big.Robust + Big.Neutral + Big.Weak)/3,
SMB_RMW = Small-Big,
Robust = (Small.Robust + Big.Robust)/2,
Weak = (Small.Weak + Big.Weak)/2,
RMW = Robust - Weak
)
portfolio_rmw <- as.data.table(portfolio_rmw)
# CMA ----
portfolio_cma <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.ac)] %>% # this operator nests functions
group_by(ym,SIZE_INVESTMENT) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_INVESTMENT,ret.port) %>% # create one column for each group
mutate(
Small = (Small.Aggressive + Small.Neutral + Small.Conservative)/3, # just exemplary
Big = (Big.Aggressive + Big.Neutral + Big.Conservative)/3,
SMB_CMA = Small-Big,
Aggressive = (Small.Aggressive + Big.Aggressive)/2,
Conservative = (Small.Conservative + Big.Conservative)/2,
CMA = Conservative - Aggressive
)
portfolio_cma <- as.data.table(portfolio_cma)
# MOM ----
portfolio_mom <- BRIC.maindata[!is.na(pf.momentum)] %>%
group_by(ym,pf.momentum) %>%
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>%
spread(pf.momentum,ret.port) %>%
mutate(
MOM = Winner - Looser
)
portfolio_mom <- as.data.table(portfolio_mom)
factors <- inner_join(x = portfolio_hml, y = portfolio_rmw, by = "ym")
factors <- inner_join(x = factors, y = portfolio_cma, by = "ym")
factors <- inner_join(x = factors, y = portfolio_mom, by = "ym")
factors <- inner_join(x = factors, y = portfolio_hmldevil, by = "ym")
factors <- inner_join(x = factors, y = market.retBricM, by = "ym")
colnames(factors)[55] <- "RMRF"
factors <- subset(factors, select = c("ym","RMRF","CMA","HML","HML_DEVIL","RMW","SMB_HML","SMB_RMW","SMB_CMA","MOM"))
factors$SMB <- ((factors$SMB_HML + factors$SMB_RMW + factors$SMB_CMA)/3)
factors <- subset(factors, select = c("ym","RMRF","SMB","HML","HML_DEVIL","RMW","CMA","MOM"))
BRIC.strategy <- BRIC.maindata
# 4.1 Value Breakpoints ----
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# 4.1.1 B/M Devil ----
helper <- BRIC.strategy[month==7, .(median_devil = quantile(BM_Devil , probs = c(0.5), na.rm=T)),by=year]
BRIC.strategy <- merge(BRIC.strategy,helper,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.growth := ifelse(BM_Devil>median_devil,"Value",(ifelse(BM_Devil<=median_devil,"Growth",NA)))]
# 4.1.2 normal B/M ----
helper <- BRIC.strategy[month==7, .(median_normal = quantile(BM, probs = c(0.5), na.rm=T)),by=year]
BRIC.strategy <- merge(BRIC.strategy,helper,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median_normal,"Value",(ifelse(BM<=median_normal,"Growth",NA)))]
# 4.2 Low Vol ----
helper <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
BRIC.strategy <- merge(BRIC.strategy,helper,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
# 4.3 Filtering ----
# __ Select the criteria via commenting out and commenting in __
# MOM
BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
# MOC
#BRIC.strategy <- subset(BRIC.strategy, pf.customMomentum == "Winner" )
# VAL
#BRIC.strategy <- subset(BRIC.strategy, pf.value == "Value" )
# GRO
BRIC.strategy <- subset(BRIC.strategy, pf.growth == "Growth" )
# VOL
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
# __ __ __ __ __ __ __ __ __
# assign new variable
strategy <- BRIC.strategy
# value weight returns
# calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
# join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
# calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
# calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
## TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
## RETURNS ----
# per month
strategy.retBricM_intermediate <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# add risk-free rate if there's no investment in a month
# risk_free rate for investment horizon
risk_free <- subset(one_m_tbill,X1 >= 199606 & X1 <= 201810)
# add hcjun
risk_free$year <- as.numeric(format(risk_free$ym, "%Y"))
risk_free$month <- as.numeric(format(risk_free$ym, "%m"))
risk_free <- data.table(risk_free)
risk_free[,hcjun := ifelse(month>=7,year,year-1)]
# left join risk_free rate and retBricM_intermediate
strategy.retBricM <- left_join(x = risk_free, y = strategy.retBricM_intermediate, by = "ym")
# exchange wExRet with 0 if na and wRet with RF if na
strategy.retBricM$wExRet <- strategy.retBricM$wExRet %>% replace_na(0)
strategy.retBricM[,wRetNew := ifelse(!is.na(wRet),wRet,RF)]
strategy.retBricM$wRet <- as.double(strategy.retBricM$wRetNew)
# rename
colnames(strategy.retBricM)[6] <- "hcjun"
strategy.retBricM <- subset(strategy.retBricM, select = c("ym","hcjun","wRet","wExRet"))
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet)
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet)
## STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet)
## SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT
## MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret)
## TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn)
## INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT
## EFFECTIVE N ----
effectiveN <- subset(strategy,select = c("ym","Id","Weight"))
effectiveN$WeightSquare <- effectiveN$Weight * effectiveN$Weight
strategy.effectiveNM <- aggregate(WeightSquare ~ ym,data = effectiveN, FUN = sum)
strategy.effectiveNM$effN <- 1/strategy.effectiveNM$WeightSquare
strategy.effectiveNT <- mean(strategy.effectiveNM$effN)
## TURNOVER ----
#filtering out unnecessary columns
turnover_calc_strategy <-subset(strategy,select= c("Id","ym","Weight","RET.USD"))
turnover_calc_strategy$RET.USD <- turnover_calc_strategy$RET.USD*(1/100)
# lagging Weight to get xi,t-1
s_weights_strategy<- subset(turnover_calc_strategy,select= c("Id","ym","Weight"))
s_weights_strategy<-reshape(s_weights_strategy, idvar = "ym", timevar = "Id", direction = "wide")
s_weights_strategy[is.na(s_weights_strategy)]=0
s_weights_strategy<-as.data.frame(s_weights_strategy)
s_lag_weights_strategy <-s_weights_strategy%>% mutate_at(vars(-"ym"),lag)
x.prevweight_strategy<-reshape(s_lag_weights_strategy,
direction = "long",idvar = "ym")
colnames(x.prevweight_strategy)[3]<-"WeightPrevPeriod"
#lagging RET.USD to get ri,t-1
s_returns_strategy<-subset(turnover_calc_strategy,select=c("Id","ym","RET.USD"))
#filtering for stocks in Strategy frame
s_returns_strategy<-setDT(s_returns_strategy)[Id %chin% turnover_calc_strategy$Id]
s_returns_strategy <-reshape(s_returns_strategy, idvar = "ym", timevar = "Id", direction = "wide")
s_returns_strategy [is.na(s_returns_strategy)]=0
s_returns_strategy <-as.data.frame(s_returns_strategy)
s_lag_returns_strategy <-s_returns_strategy %>% mutate_at(vars(-"ym"),lag)
x.prevret_strategy<-reshape(s_lag_returns_strategy, direction = "long",idvar = "ym")
colnames(x.prevret_strategy)[3]<-"RET.USDPrevPeriod"
x.prevret_strategy$RET.USDPrevPeriod <- x.prevret_strategy$RET.USDPrevPeriod*(1/100)
#leftjoining RET.USDPrevPeriod & WeightPrevPeriod to turnover_calc_strategy (aka strategy frame)
turnover_calc_strategy<-left_join(turnover_calc_strategy,x.prevweight_strategy,by = c("Id","ym"))
turnover_calc_strategy<-left_join(turnover_calc_strategy,x.prevret_strategy,by = c("Id","ym"))
turnover_calc_strategy [is.na(turnover_calc_strategy)]=0
#calculating x epsilon thing
#numerator
turnover_calc_strategy$x_epsilon_numerator_strategy <- turnover_calc_strategy$WeightPrevPeriod * (1+turnover_calc_strategy$RET.USDPrevPeriod)
x_epsilon_denominator_strategy <-aggregate(x_epsilon_numerator_strategy~ym,data = turnover_calc_strategy,FUN = sum)
colnames(x_epsilon_denominator_strategy)[2]<-"x_epsilon_denominator_strategy"
turnover_calc_strategy <-left_join(turnover_calc_strategy,x_epsilon_denominator_strategy,by="ym")
turnover_calc_strategy$x_epsilon_strategy <- turnover_calc_strategy$x_epsilon_numerator_strategy / turnover_calc_strategy$x_epsilon_denominator_strategy
turnover_calc_strategy [is.na(turnover_calc_strategy)]=0
turnover_calc_strategy$turnover = (turnover_calc_strategy$Weight - turnover_calc_strategy$x_epsilon_strategy)
turnover_calc_strategy$turnover <- abs(turnover_calc_strategy$turnover)
turnover_pattern_strategy <- aggregate(turnover~ym,data = turnover_calc_strategy,FUN = sum)
turnover_pattern_strategy$turnover<- 0.5*turnover_pattern_strategy$turnover
summary(turnover_pattern_strategy$turnover)
strategy.turnover<- mean(turnover_pattern_strategy$turnover)
#plot(x=turnover_pattern_strategy$ym,y=turnover_pattern_strategy$turnover)
## AVG. NUMBER OF STOCKS ----
strat.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
colnames(strat.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
strategy.avgNumberOfStocks <- sum(strat.EqualWeights$NumberOfStocks)/length(strat.EqualWeights$NumberOfStocks)
# mean return of whole period
benchmark.retBricT <- mean(benchmark.retBricY$wRet)
# mean excess return of whole period
benchmark.retExBricT <- mean(benchmark.retBricY$wExRet)
## STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
benchmark.sdBricT <- sd(benchmark.retBricY$wRet)
## SHARP RATIO ----
benchmark.srBricT <- benchmark.retExBricT/benchmark.sdBricT
## MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- benchmark.retBricY$wRet
benchmark.mdBricT <- maxdrawdown(ret)
## TRACKING ERROR ----
# merge portfolio returns and benchmark returns
benchmark_benchmark <- inner_join(x = benchmark.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(benchmark_benchmark)[2] <- "wRet_benchmark"
colnames(benchmark_benchmark)[3] <- "wExRet_benchmark"
colnames(benchmark_benchmark)[4] <- "wRet_benchmark"
colnames(benchmark_benchmark)[5] <- "wExRet_benchmark"
benchmark_benchmark$pf_activeReturn <- benchmark_benchmark$wRet_benchmark - benchmark_benchmark$wRet_benchmark
benchmark.teBricT <- sd(benchmark_benchmark$pf_activeReturn)
## INFROMATION RATIO ----
benchmark.irBricT <- mean(benchmark_benchmark$pf_activeReturn)/benchmark.teBricT
## TOP 10 ----
benchmark_topTen <- BRIC.benchmark %>% arrange(desc(ValueWeight)) %>% group_by(ym) %>% top_n(wt=ValueWeight,10)
benchmark.topTenBricY <- aggregate(ValueWeight ~ ym, data = benchmark_topTen, FUN = sum)
benchmark.topTenBricT <- mean(benchmark.topTenBricY$ValueWeight)
## EFFECTIVE N ----
effectiveNBe <- subset(BRIC.benchmark,select = c("ym","Id","ValueWeight"))
effectiveNBe$WeightSquare <- effectiveNBe$ValueWeight * effectiveNBe$ValueWeight
benchmark.effectiveNM <- aggregate(WeightSquare ~ ym,data = effectiveNBe, FUN = sum)
benchmark.effectiveNM$effN <- 1/benchmark.effectiveNM$WeightSquare
benchmark.effectiveNT <- mean(benchmark.effectiveNM$effN)
## TURNOVER ----
#filtering out unnecessary columns
turnover_calc_benchmark <-subset(BRIC.benchmark,select= c("Id","ym","ValueWeight","RET.USD"))
turnover_calc_benchmark$RET.USD <- turnover_calc_benchmark$RET.USD*(1/100)
# lagging Weight to get xi,t-1
s_weights_benchmark<- subset(turnover_calc_benchmark,select= c("Id","ym","ValueWeight"))
s_weights_benchmark<-reshape(s_weights_benchmark, idvar = "ym", timevar = "Id", direction = "wide")
s_weights_benchmark[is.na(s_weights_benchmark)]=0
s_weights_benchmark<-as.data.frame(s_weights_benchmark)
s_lag_weights_benchmark <-s_weights_benchmark%>% mutate_at(vars(-"ym"),lag)
x.prevweight_benchmark<-reshape(s_lag_weights_benchmark,
direction = "long",idvar = "ym")
colnames(x.prevweight_benchmark)[3]<-"WeightPrevPeriod"
#lagging RET.USD to get ri,t-1
s_returns_benchmark<-subset(turnover_calc_benchmark,select=c("Id","ym","RET.USD"))
#filtering for stocks in benchmark frame
s_returns_benchmark<-setDT(s_returns_benchmark)[Id %chin% turnover_calc_benchmark$Id]
s_returns_benchmark <-reshape(s_returns_benchmark, idvar = "ym", timevar = "Id", direction = "wide")
s_returns_benchmark [is.na(s_returns_benchmark)]=0
s_returns_benchmark <-as.data.frame(s_returns_benchmark)
s_lag_returns_benchmark <-s_returns_benchmark %>% mutate_at(vars(-"ym"),lag)
x.prevret_benchmark<-reshape(s_lag_returns_benchmark, direction = "long",idvar = "ym")
colnames(x.prevret_benchmark)[3]<-"RET.USDPrevPeriod"
x.prevret_benchmark$RET.USDPrevPeriod <- x.prevret_benchmark$RET.USDPrevPeriod*(1/100)
#leftjoining RET.USDPrevPeriod & WeightPrevPeriod to turnover_calc_benchmark (aka benchmark frame)
turnover_calc_benchmark<-left_join(turnover_calc_benchmark,x.prevweight_benchmark,by = c("Id","ym"))
turnover_calc_benchmark<-left_join(turnover_calc_benchmark,x.prevret_benchmark,by = c("Id","ym"))
turnover_calc_benchmark [is.na(turnover_calc_benchmark)]=0
#calculating x epsilon thin
#numerator
turnover_calc_benchmark$x_epsilon_numerator_benchmark <- turnover_calc_benchmark$WeightPrevPeriod * (1+turnover_calc_benchmark$RET.USDPrevPeriod)
x_epsilon_denominator_benchmark <-aggregate(x_epsilon_numerator_benchmark~ym,data = turnover_calc_benchmark,FUN = sum)
colnames(x_epsilon_denominator_benchmark)[2]<-"x_epsilon_denominator_benchmark"
turnover_calc_benchmark <-left_join(turnover_calc_benchmark,x_epsilon_denominator_benchmark,by="ym")
turnover_calc_benchmark$x_epsilon_benchmark <- turnover_calc_benchmark$x_epsilon_numerator_benchmark / turnover_calc_benchmark$x_epsilon_denominator_benchmark
turnover_calc_benchmark [is.na(turnover_calc_benchmark)]=0
turnover_calc_benchmark$turnover = (turnover_calc_benchmark$Weight - turnover_calc_benchmark$x_epsilon_benchmark)
turnover_calc_benchmark$turnover <- abs(turnover_calc_benchmark$turnover)
turnover_pattern_benchmark <- aggregate(turnover~ym,data = turnover_calc_benchmark,FUN = sum)
turnover_pattern_benchmark$turnover<- 0.5*turnover_pattern_benchmark$turnover
summary(turnover_pattern_benchmark$turnover)
benchmark.turnover<- mean(turnover_pattern_benchmark$turnover)
#plot(x=turnover_pattern_benchmark$ym,y=turnover_pattern_benchmark$turnover)
## AVG. NUMBER OF STOCKS ----
bench.EqualWeights <- aggregate(Id ~ ym, data = BRIC.benchmark, FUN=function(x) length(unique(x)))
colnames(bench.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
benchmark.avgNumberOfStocks <- sum(bench.EqualWeights$NumberOfStocks)/length(bench.EqualWeights$NumberOfStocks)
load("~/BRIC_Asset_Pricing_Project/allStrategies.RData")
View(allStrategies)

panel_country_BM <- left_join(x = panel_country_noNA,y = BRIC.yearly_helper, by = "Id")
View(BRIC.yearly_helper)
hlpvariable2 <- panel_country_BM[month==7 & !is.na(BM) & Size=="Big", .(bm_bb30 = quantile(BM , probs = c(0.3), na.rm=T),
bm_bb70 = quantile(BM , probs = c(0.7), na.rm=T)),by=year]
panel_country_noNA <- subset(c("hcjun","Id","country","MV.USD","RET.USD","ym","RF","month","year","Size"))
panel_country_noNA <- subset(panel_country_noNA, select = c("hcjun","Id","country","MV.USD","RET.USD","ym","RF","month","year","Size"))
View(panel_country_noNA)
panel_country_BM <- left_join(x = panel_country_noNA,y = BRIC.yearly_helper, by = "Id")
View(panel_country_BM)
View(panel_country_BM)
head(panel_country_BM)
BRIC.yearly_helper <- na.omit(BRIC.yearly_helper$BM)
BRIC.yearly_helper <- na.omit(BRIC.yearly_helper)
BRIC.yearly_helper <- na.omit(BRIC.yearly_helper)
BRIC.yearly_helper <- subset( BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","WC03501","WC07210") )
BRIC.yearly_helper <- na.omit(BRIC.yearly_helper)
BRIC.yearly_helper$BM <- BRIC.yearly_helper$WC03501 / BRIC.yearly_helper$WC07210
View(BRIC.yearly_helper)
BRIC.yearly_helper <- subset( BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","WC03501","WC07210") )
BRIC.yearly_helper <- na.omit(BRIC.yearly_helper,cols = "WC03501")
BRIC.yearly_helper$BM <- BRIC.yearly_helper$WC03501 / BRIC.yearly_helper$WC07210
# merge yearly BM data with our table
BRIC.yearly_helper <- subset( BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","WC03501","WC07210") )
BRIC.yearly_helper$BM <- BRIC.yearly_helper$WC03501 / BRIC.yearly_helper$WC07210
# delete NA s from BM column
BRIC.yearly_helper <- na.omit(BRIC.yearly_helper,cols = "BM")
# merge yearly BM data with our table
BRIC.yearly_helper <- subset( BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","WC03501","WC07210") )
BRIC.yearly_helper$BM <- BRIC.yearly_helper$WC03501 / BRIC.yearly_helper$WC07210
# delete NA s from BM column
test <- na.omit(BRIC.yearly_helper)
BRIC.yearly_helper <- na.omit(BRIC.yearly_helper,cols = "BM")
## Determine portfolio breakpoints for Size
# Fama-French take the MV from end-of-June and rebalance yearly
BRIC.monthly_neww[,month := month(Date)]
BRIC.monthly_neww[,year := year(Date)]
BRIC.monthly_neww[,hcjun := ifelse(month>=7,year,year-1)]
# determine size portfolio allocation from July on using data that's public from end-of-June on
setorder(BRIC.monthly_neww,Date,-MV.USD)
hlpvariable <-  BRIC.monthly_neww[month==7 & !is.na(MV.USD),
.(Size = ifelse((cumsum(MV.USD)/sum(MV.USD))>=0.9,"Small","Big"),Id),
by=year]
# Merge the size portfolio allocation back from July Y to June Y+1
panel_country <- merge(BRIC.monthly_neww,hlpvariable,
by.x=c("hcjun","Id"),
by.y=c("year","Id"),
all.x=T)
panel_country_noNA <- na.omit(panel_country,cols = "Size")
# merge yearly BM data with our table
BRIC.yearly_helper <- subset( BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","WC03501","WC07210") )
BRIC.yearly_helper$BM <- BRIC.yearly_helper$WC03501 / BRIC.yearly_helper$WC07210
# delete NA s from BM column
BRIC.yearly_helper <- na.omit(BRIC.yearly_helper,cols = "BM")
summary(BRIC.yearly_helper$BM)
# eliminating unused columns
panel_country_noNA <- subset(panel_country_noNA, select = c("hcjun","Id","country","MV.USD","RET.USD","ym","RF","month","year","Size"))
panel_country_BM <- left_join(x = panel_country_noNA,y = BRIC.yearly_helper, by = "Id")
hlpvariable2 <- panel_country_BM[month==7 & !is.na(BM) & Size=="Big", .(bm_bb30 = quantile(BM , probs = c(0.3), na.rm=T),
bm_bb70 = quantile(BM , probs = c(0.7), na.rm=T)),by=year]
View(hlpvariable2)
panel_country_new <- merge(panel_country_BM,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
View(hlpvariable2)
memory.limit(9999999999)
# Merge the B/M portfolio allocation back from July Y to June Y+1
# Merge the B/M portfolio allocation back from July Y to June Y+1
# Merge the B/M portfolio allocation back from July Y to June Y+1
# Merge the B/M portfolio allocation back from July Y to June Y+1
panel_country_new <- merge(panel_country_BM,hlpvariable2,
panel_country_new <- merge(panel_country_BM,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
panel_country_new
# eliminating unused columns
panel_country_noNA <- subset(panel_country_noNA, select = c("hcjun","Id","country","MV.USD","RET.USD","ym","RF","month","year","Size"))
panel_country_BM <- left_join(x = panel_country_noNA,y = BRIC.yearly_helper, by = "Id")
# Determine the B/M breakpoints based on big stocks only
hlpvariable2 <- panel_country_BM[month==7 & !is.na(BM) & Size=="Big", .(bm_bb30 = quantile(BM , probs = c(0.3), na.rm=T),
bm_bb70 = quantile(BM , probs = c(0.7), na.rm=T)),by=year]
# Merge the B/M portfolio allocation back from July Y to June Y+1
memory.limit(9999999999)
panel_country_new <- merge(panel_country_BM,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
panel_country_new
View(panel_country_new)
panel_country_new[ , pf.bm := ifelse(BM>bm_bb70,"High",ifelse((BM<=bm_bb70 & BM>bm_bb30),"Neutral",ifelse(BM<=bm_bb30,"Low",NA)))]
panel_country_new[, SIZE_VALUE := paste0(Size,".",pf.bm)]
View(panel_country_new)
View(panel_country_new)
panel_country_new
table(panel_country_new$SIZE_VALUE)
panel_country_BM <- join(x = panel_country_noNA,y = BRIC.yearly_helper, by = "Id")
panel_country_BM <- full_join(x = panel_country_noNA,y = BRIC.yearly_helper, by = "Id")
hlpvariable2 <- panel_country_BM[month==7 & !is.na(BM) & Size=="Big", .(bm_bb30 = quantile(BM , probs = c(0.3), na.rm=T),
bm_bb70 = quantile(BM , probs = c(0.7), na.rm=T)),by=year]
# Merge the B/M portfolio allocation back from July Y to June Y+1
panel_country_new <- merge(panel_country_BM,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
panel_country_new[ , pf.bm := ifelse(BM>bm_bb70,"High",ifelse((BM<=bm_bb70 & BM>bm_bb30),"Neutral",ifelse(BM<=bm_bb30,"Low",NA)))]
panel_country_new[, SIZE_VALUE := paste0(Size,".",pf.bm)]
# get an overview
table(panel_country_new$SIZE_VALUE)
View(panel_country_new)
panel_country_new
panel_country_BM <- inner_join(x = panel_country_noNA,y = BRIC.yearly_helper, by = "Id")
head(panel_country_new)
## Determine portfolio breakpoints for Size
# Fama-French take the MV from end-of-June and rebalance yearly
BRIC.monthly_neww[,month := month(Date)]
BRIC.monthly_neww[,year := year(Date)]
BRIC.monthly_neww[,hcjun := ifelse(month>=7,year,year-1)]
# determine size portfolio allocation from July on using data that's public from end-of-June on
setorder(BRIC.monthly_neww,Date,-MV.USD)
hlpvariable <-  BRIC.monthly_neww[month==7 & !is.na(MV.USD),
.(Size = ifelse((cumsum(MV.USD)/sum(MV.USD))>=0.9,"Small","Big"),Id),
by=year]
# Merge the size portfolio allocation back from July Y to June Y+1
panel_country <- merge(BRIC.monthly_neww,hlpvariable,
by.x=c("hcjun","Id"),
by.y=c("year","Id"),
all.x=T)
panel_country_noNA <- na.omit(panel_country,cols = "Size")
# merge yearly BM data with our table
BRIC.yearly_helper <- subset( BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","WC03501","WC07210") )
BRIC.yearly_helper$BM <- BRIC.yearly_helper$WC03501 / BRIC.yearly_helper$WC07210
# delete NA s from BM column
BRIC.yearly_helper <- na.omit(BRIC.yearly_helper,cols = "BM")
summary(BRIC.yearly_helper$BM)
# eliminating unused columns
panel_country_noNA <- subset(panel_country_noNA, select = c("hcjun","Id","country","MV.USD","RET.USD","ym","RF","month","year","Size"))
panel_country_BM <- inner_join(x = panel_country_noNA,y = BRIC.yearly_helper, by = "Id")
# Determine the B/M breakpoints based on big stocks only
hlpvariable2 <- panel_country_BM[month==7 & !is.na(BM) & Size=="Big", .(bm_bb30 = quantile(BM , probs = c(0.3), na.rm=T),
bm_bb70 = quantile(BM , probs = c(0.7), na.rm=T)),by=year]
# Merge the B/M portfolio allocation back from July Y to June Y+1
panel_country_new <- merge(panel_country_BM,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
panel_country_new[ , pf.bm := ifelse(BM>bm_bb70,"High",ifelse((BM<=bm_bb70 & BM>bm_bb30),"Neutral",ifelse(BM<=bm_bb30,"Low",NA)))]
panel_country_new[, SIZE_VALUE := paste0(Size,".",pf.bm)]
# get an overview
head(panel_country_new)
for(i in 1:length(strategy_df$Id)){
print(i)
}
strategy_df <- pdata.frame(BRIC.monthly,index = c("Id","ym"))
library(plm)
strategy_df <- pdata.frame(BRIC.monthly,index = c("Id","ym"))
strategy_df <- pdata.frame(BRIC.monthly,index = c("Id","ym"))
for(i in 1:length(strategy_df$Id)){
print(i)
}
sd.y <- as.numeric()
for(i in 1:10){
sd.y[i] <- sd(strategy_df$RET.USD[i])
}
sd.y
View(strategy_df)
head(state.x77)
aggregate(state.x77, list(Region = state.region), mean)
head(state.x77)
View(strategy_df)
head(state.x77)
aggregate(state.x77, list(Region = state.region), mean)
head(state.region)
head(state)
head(state.region)
head(Region)
head(region)
head(state.center)
head(state.division)
head(state.region)
head(state.x77)
head(state.region)
aggregate(state.x77, list(Region = state.region), mean)
head(state.area)
head(state.x77)
aggregate(state.x77, list(Region = state.region), mean)
state.abb
state.area
state.center
state.division
state.name
state.region
state.x77
aggregate(state.x77, list(Region = state.region), mean)
iris
aggregate(.~ Species, data = iris, mean)
aggregate(.~ Species, data = iris, mean)
iris
aggregate(.~ ym, data = strategy_df, mean(strategy_df$RET.USD))
memory.limit(9999999999)
aggregate(.~ ym, data = strategy_df, mean(strategy_df$RET.USD))
aggregate(.~ Species, data = iris, mean)
iris
testy <- strategy_df[1:100,]
View(testy)
aggregate(.~ ym, data = testy, mean(RET.USD))
aggregate(.~ ym, data = testy, mean(testy$RET.USD))
aggregate(.~ ym, data = testy, mean)
testy <- strategy_df[1:10000,]
aggregate(.~ ym, data = testy, mean)
testy <- strategy_df[1:1000,]
aggregate(.~ ym, data = testy, sd(testy$RET.USD))
aggregate(.~ ym, data = testy, FUN = sd(testy$RET.USD))
aggregate(.~ ym, data = testy,sd(testy$RET.USD))
aggregate(.~ ym, data = testy,testy$RET.USD,FUN = sd)
aggregate(.~ ym, data = testy,testy$RET.USD,FUN = sd,na.action = F)
aggregate(.~ ym, data = testy,testy$RET.USD,FUN = sd,na.action = T)
aggregate(.~ ym, data = testy,testy$RET.USD,FUN = sd)
testy <- strategy_df[1:1000,]
testy <- na.omit(testy$RET.USD)
aggregate(.~ ym, data = testy,testy$RET.USD,FUN = sd)
testy <- na.omit(testy,cols = RET.USD)
aggregate(.~ ym, data = testy,testy$RET.USD,FUN = sd)
testy <- strategy_df[1:1000,]
testy <- strategy_df[1:1000,]
testy <- na.omit(testy,cols = RET.USD)
aggregate(.~ ym, data = testy,testy$RET.USD,FUN = sd)
testy <- subset(strategy_df,select = "ym","RET.USD")
testy <- strategy_df[1:1000,]
testy <- na.omit(testy,cols = RET.USD)
aggregate(.~ ym, data = testy,testy$RET.USD,FUN = sd)
testy <- strategy_df[1:1000,]
testy <- subset(strategy_df,select = "ym","RET.USD")
testy <- strategy_df[1:1000,]
testy <- subset(testy,select = "ym","RET.USD")
testy <- strategy_df[1:1000,]
testy <- subset(testy,select = c("ym","RET.USD"))
testy <- na.omit(testy,cols = RET.USD)
View(testy)
aggregate(.~ ym, data = testy,testy$RET.USD,FUN = sd)
aggregate(.~ ym, data = testy,FUN = sd)
testy <- subset(strategy_df,select = c("ym","RET.USD"))
testy <- na.omit(testy,cols = RET.USD)
aggregate(.~ ym, data = testy,FUN = sd)
testy <- subset(BRIC.monthly,select = c("ym","RET.USD"))
testy <- na.omit(testy,cols = RET.USD)
aggregate(.~ ym, data = testy,FUN = sd)
aggregate(.~ ym, data = testy,FUN = sd)
aggregate(.~ ym, data = testy,FUN = mean)
sd_ret <- aggregate(.~ ym, data = testy,FUN = sd)
mean_ret <- aggregate(.~ ym, data = testy,FUN = mean)
View(mean_ret)
plot(sd_ret$ym,sd_ret$RET.USD)
plot(mean_ret$ym,mean_ret$RET.USD)
plot(sd_ret$ym,sd_ret$RET.USD)
plot(mean_ret$ym,mean_ret$RET.USD)
hist(mean_ret$ym,mean_ret$RET.USD)
plot(sd_ret$ym,sd_ret$RET.USD)
plot(mean_ret$ym,mean_ret$RET.USD)
sd_help <- subset(BRIC.monthly,select = c("ym","RET.USD"))
sd_help <- na.omit(sd_help,cols = RET.USD) # may be deleted, if redundant
sd_ret <- aggregate(.~ ym, data = sd_help,FUN = sd)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = mean)
plot(sd_ret$ym,sd_ret$RET.USD)
plot(mean_ret$ym,mean_ret$RET.USD)
View(sd_help)
View(sd_ret)
View(mean_ret)
sd.y <- as.numeric()
for(i in 1:10){
sd.y[i] <- sd(strategy_df$RET.USD[i])
}
sd.y
sd.y <- as.numeric()
for(i in 1:10){
sd.y[i] <- sd(BRIC.monthly$RET.USD[i])
}
sd.y
sd.y <- as.numeric()
for(i in 1:length(strategy_df$Id)){
sd.y[i] <- (1/length(strategy_df$Id))*sqrt((strategy_df$RET.USD[i]- mean(strategy_df$RET.USD))^2)
}
sd.y <- as.numeric()
for(i in 1:10(strategy_df$Id)){
sd.y[i] <- (1/length(strategy_df$Id))*sqrt((strategy_df$RET.USD[i]- mean(strategy_df$RET.USD))^2)
}
sd.y <- as.numeric()
for(i in 1:10){
sd.y[i] <- (1/10)*sqrt((strategy_df$RET.USD[i]- mean(strategy_df$RET.USD))^2)
}
sd.y
View(mean_ret)
sd(1:2) ^ 2
sd(1:3) ^ 2
sd.y <- as.numeric()
for(i in 1:10){
sd.y[i] <- (1/10)*sqrt((strategy_df$RET.USD[i]- mean(strategy_df$RET.USD))^2)
}
sd.y
24.69284*sqrt(12)
24.69284/sqrt(12)
sd_ret <- aggregate(.~ ym,Id, data = sd_help,FUN = sd)
sd_ret <- aggregate(.~ ym, data = sd_help,FUN = sd)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = mean)
sd_ret <- aggregate(.~ Id, data = sd_help,FUN = sd)
sd_help <- subset(BRIC.monthly,select = c("Id","ym","RET.USD"))
sd_help <- na.omit(sd_help,cols = RET.USD) # may be deleted, if redundant
sd_ret <- aggregate(.~ Id, data = sd_help,FUN = sd)
mean_ret <- aggregate(.~ Id, data = sd_help,FUN = mean)
View(sd_ret)
View(mean_ret)
sd_ret <- aggregate(.~ c(Id,ym), data = sd_help,FUN = sd)
View(sd_ret)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = mean)
View(mean_ret)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = count.fields())
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = count)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = sum)
View(mean_ret)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = country_mcap)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = nrow())
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = nrow)
View(mean_ret)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = count)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = count(Id))
library(dplyr)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = count)
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = count(Id))
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = count("Id"))
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = count(sd_help$Id))
mean_ret <- aggregate(.~ ym, data = sd_help,FUN = NROW)
View(mean_ret)
sd_help %>% count(ym, sort = TRUE)
number_of_stocks <- aggregate(.~ ym, data = sd_help,FUN = NROW,sort = TRUE)
sd_help %>% count(ym)
number_of_stocks <- aggregate(.~ ym, data = sd_help,FUN = NROW)
mean_return <- aggregate(.~ ym, data = sd_help,FUN = mean)
sd_help %>% count(ym)
View(mean_ret)
dummyy <- aggregate(.~ ym, data = sd_help, FUN = NROW)
View(testy)
#install.packages("plm")
library(plm)
library(dplyr)
strategy_df <- pdata.frame(BRIC.monthly,index = c("Id","ym"))
# calculate sd of return by ym
sd_help <- subset(BRIC.monthly,select = c("Id","ym","RET.USD"))
sd_help <- na.omit(sd_help,cols = RET.USD) # may be deleted, if redundant
# monthly basis
number_of_stocks <- aggregate(.~ ym, data = sd_help,FUN = NROW) # alternative: sd_help %>% count(ym)
mean_return <- aggregate(.~ ym, data = sd_help,FUN = mean)
dummyy <- aggregate(.~ ym, data = sd_help, FUN = NROW)
plot(sd_ret$ym,sd_ret$RET.USD)
plot(mean_ret$ym,mean_ret$RET.USD)
# yearly basis
plot(mean_ret$ym,mean_ret$RET.USD)
plot(mean_return$ym,mean_return$RET.USD)
View(mean_return)
plot(dummyy$ym,dummyy$RET.USD)
plot(mean_return$ym,mean_return$RET.USD)
View(dummyy)
View(number_of_stocks)
number_of_stocks <- aggregate(.~ ym, data = sd_help,FUN = NROW(Id),sum(RET.USD)) # alternative: sd_help %>% count(ym)
number_of_stocks <- aggregate(.~ ym, data = sd_help,FUN = NROW("Id"),sum("RET.USD")) # alternative: sd_help %>% count(ym)
number_of_stocks <- aggregate(.~ ym, data = sd_help,FUN = NROW) # alternative: sd_help %>% count(ym)
dummyy <- aggregate(.~ ym, data = sd_help, FUN = NROW(Id))
dummyy <- aggregate(.~ ym, data = sd_help, FUN = NROW(x))
dummyy <- aggregate(.~ ym, data = sd_help, FUN = NROW(Id+RET.USD))
dummy <- aggregate(RET.USD ~ ym, data = sd_help, FUN = mean)
View(dummyy)
View(dummy)
View(mean_return)
mean_return <- aggregate(RET.USD ~ ym, data = sd_help,FUN = mean)
dummy <- aggregate(RET.USD ~ ym + Id, data = sd_help, FUN = mean)
View(mean_return)
View(dummy)
dummy <- aggregate(RET.USD ~ ym + Id, data = sd_help, FUN = sd)
View(dummy)
mean_return <- aggregate(RET.USD ~ ym, data = sd_help,FUN = var)
View(mean_return)
mean_return <- aggregate(RET.USD ~ ym, data = sd_help,FUN = mean)
mean_return <- aggregate(RET.USD ~ ym, data = sd_help,FUN = mean)
memory.limit(9999999999)
mean_return <- aggregate(RET.USD ~ ym, data = sd_help,FUN = mean)
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD))
View(dummy)
View(mean_return)
dummy <- sd_help %>%
group_by(ym) %>%
dummy$NEW <- summarize(mean(RET.USD))
dummy <- sd_help %>%
group_by(ym) %>%
dummy$NEW <- summarize(mean(sd_help$RET.USD))
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD))
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD))
View(dummy)
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD),sd(RET.USD))
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD),NROW(ID),sd(RET.USD))
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD),NROW(Id),sd(RET.USD))
View(dummy)
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD),NROW(Id),sd(RET.USD))
`colnames<-`("ym","Mean","Median","n","Sd")
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD),NROW(Id),sd(RET.USD))
colnames<-c("ym","Mean","Median","n","Sd")
View(dummy)
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD),NROW(Id),sd(RET.USD))
colnames(dummy) <- c("ym","Mean","Median","n","Sd")
View(sd_help)
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD),NROW(Id))
colnames(dummy) <- c("ym","Mean","Median","n")
View(dummy)
sd_help_new <- inner_join(sd_help,x,by=ym)
sd_help_new <- inner_join(sd_help,dummy,by=ym)
sd_help_new <- inner_join(sd_help,dummy,by="ym")
View(sd_help_new)
sd_return <- aggregate(RET.USD ~ ym, data = sd_help, FUN = sd)
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD),NROW(Id),sd(RET.USD))
colnames(dummy) <- c("ym","Mean","Median","n","sd")
sd_help_new <- inner_join(sd_help,dummy,by="ym")
View(sd_help_new)
sd_help_new$variance <- (sd_help_new$RET.USD - sd_help_new$Mean)^2
View(sd_help_new)
sd_help_new$variance <- ((sd_help_new$RET.USD - sd_help_new$Mean)^2)
sd_help_new$SqrtDevOfStock <- ((sd_help_new$RET.USD - sd_help_new$Mean)^2)
sd_help_neww <- sd_help_new %>%
group_by(ym) %>%
summarize(sum(SqrtDevOfStock))
View(sd_help_neww)
sd_help_newww <- inner_join(dummy,sd_help_neww,by="ym")
View(sd_help_newww)
df3 <- inner_join(dummy,sd_help_neww,by="ym")
df1 <- inner_join(sd_help,dummy,by="ym")
# sample variance
df1$SqrtDevOfStock <- ((df1$RET.USD - df1$Mean)^2)
df2 <- df1 %>%
group_by(ym) %>%
summarize(sum(SqrtDevOfStock))
df3 <- inner_join(dummy,df2,by="ym")
View(df3)
df3$Variance <- (1/(1-df3$n))
df3$sdOtherCalc <- sqrt(df3$Variance)
View(df3)
df3$Variance <- (1/(df3$n-1))*df3$`sum(SqrtDevOfStock)`
df3$sdOtherCalc <- sqrt(df3$Variance)
df1$"(r(t)-μ)^2" <- ((df1$RET.USD - df1$Mean)^2)
View(df1)
df1$"r(t)-μ)^2" <- ((df1$RET.USD - df1$Mean)^2)
df2 <- df1 %>%
group_by(ym) %>%
summarize(sum("r(t)-μ)^2"))
df1$potOfRetMinMy <- ((df1$RET.USD - df1$Mean)^2)
df2 <- df1 %>%
group_by(ym) %>%
summarize(sum(potOfRetMinMy))
df3 <- inner_join(dummy,df2,by="ym")
df3$Variance <- (1/(df3$n-1))*df3$potOfRetMinMy
#install.packages("plm")
library(plm)
library(dplyr)
strategy_df <- pdata.frame(BRIC.monthly,index = c("Id","ym"))
# calculate sd of return by ym
sd_help <- subset(BRIC.monthly,select = c("Id","ym","RET.USD"))
sd_help <- na.omit(sd_help,cols = RET.USD) # may be deleted, if redundant
# monthly basis
number_of_stocks <- aggregate(.~ ym, data = sd_help,FUN = NROW) # alternative: sd_help %>% count(ym)
#install.packages("plm")
library(plm)
library(dplyr)
#strategy_df <- pdata.frame(BRIC.monthly,index = c("Id","ym"))
# calculate sd of return by ym
sd_help <- subset(BRIC.monthly,select = c("Id","ym","RET.USD"))
sd_help <- na.omit(sd_help,cols = RET.USD) # may be deleted, if redundant
# monthly basis
number_of_stocks <- aggregate(.~ ym, data = sd_help,FUN = NROW) # alternative: sd_help %>% count(ym)
mean_return <- aggregate(RET.USD ~ ym, data = sd_help,FUN = mean)
sd_return <- aggregate(RET.USD ~ ym, data = sd_help, FUN = sd)
dummy <- sd_help %>%
group_by(ym) %>%
summarize(mean(RET.USD),median(RET.USD),NROW(Id),sd(RET.USD))
colnames(dummy) <- c("ym","Mean","Median","n","sd")
df1 <- inner_join(sd_help,dummy,by="ym")
# sample variance
df1$potOfRetMinμ <- ((df1$RET.USD - df1$Mean)^2)
df2 <- df1 %>%
group_by(ym) %>%
summarize(sum(potOfRetMinμ))
df3 <- inner_join(dummy,df2,by="ym")
df3$Variance <- (1/(df3$n-1))*df3$potOfRetMinμ
View(df3)
View(df3)

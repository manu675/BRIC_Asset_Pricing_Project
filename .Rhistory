benchmark.retCountryY$wRet <- benchmark.retCountryY$wRet*12
benchmark.retCountryY$wExRet <- benchmark.retCountryY$wExRet*12
# single dataframe
benchmark_BRIC <- inner_join(benchmark.retBricY,benchmark.retBricM,by = "hcjun")
benchmark_Country <- inner_join(benchmark.retCountryY,benchmark.retCountryM,by = c("hcjun","country.x"))
# rename columns
colnames(benchmark_BRIC)[2] <- "YearlyReturn"
colnames(benchmark_BRIC)[3] <- "YearlyExcessReturn"
colnames(benchmark_BRIC)[5] <- "MonthlyReturn"
colnames(benchmark_BRIC)[6] <- "MonthlyExcessReturn"
colnames(benchmark_Country)[3] <- "YearlyReturn"
colnames(benchmark_Country)[4] <- "YearlyExcessReturn"
colnames(benchmark_Country)[6] <- "MonthlyReturn"
colnames(benchmark_Country)[7] <- "MonthlyExcessReturn"
```
## 4.5 Market (Excess) Return
```{r}
# create copy
BRIC.market <- BRIC.maindata
# value weight returns
## calculate monthly market value over all stocks
BRIC.market.valueWeights <- aggregate(LMV.USD ~ ym, data = BRIC.market, FUN = sum)
colnames(BRIC.market.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
BRIC.market <- inner_join(x = BRIC.market, y = BRIC.market.valueWeights, by = "ym")
## calculate value weight
BRIC.market$ValueWeight <- BRIC.market$LMV.USD/BRIC.market$TotalValue
## calculate value weight excess return / return
BRIC.market$wRet <- BRIC.market$ValueWeight*BRIC.market$RET.USD
BRIC.market$wExRet <- BRIC.market$ValueWeight * BRIC.market$RiRF
# per month
market.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = BRIC.market,FUN = sum)
# per year
market.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = market.retBricM,FUN = mean)
## annualise
market.retBricY$wRet <- market.retBricY$wRet*12
market.retBricY$wExRet <- market.retBricY$wExRet*12
# per country
market.retCountryM <- aggregate(cbind(wRet,wExRet) ~ country.x + ym + hcjun, data = BRIC.market,FUN = sum)
# per year
market.retCountryY <- aggregate(cbind(wRet,wExRet) ~ country.x + hcjun, data = market.retCountryM,FUN = mean)
## annualise
market.retCountryY$wRet <- market.retCountryY$wRet*12
market.retCountryY$wExRet <- market.retCountryY$wExRet*12
# single dataframe
market_BRIC <- inner_join(market.retBricY,market.retBricM,by = "hcjun")
market_Country <- inner_join(market.retCountryY,market.retCountryM,by = c("hcjun","country.x"))
# rename columns
colnames(market_BRIC)[2] <- "YearlyReturn"
colnames(market_BRIC)[3] <- "YearlyExcessReturn"
colnames(market_BRIC)[5] <- "MonthlyReturn"
colnames(market_BRIC)[6] <- "MonthlyExcessReturn"
colnames(market_Country)[3] <- "YearlyReturn"
colnames(market_Country)[4] <- "YearlyExcessReturn"
colnames(market_Country)[6] <- "MonthlyReturn"
colnames(market_Country)[7] <- "MonthlyExcessReturn"
```
Breakpoints for RMW and CMA are based on Jiao(2017) and FF(2015) 2x3 sort = NYSE Percentiles (FF(2015) p.6)
![PortfolioSorts.] ("Images/PortfolioSorts.jpg")
##4.6 HML: Determine B/M breakpoints
```{r}
# Determine the B/M breakpoints based on big stocks only
hlpvariable2 <- BRIC.maindata[month==7 & !is.na(BM) & pf.size=="Big", .(bm_bb30 = quantile(BM , probs = c(0.3), na.rm=T),
bm_bb70 = quantile(BM , probs = c(0.7), na.rm=T)),by=year]
# Merge the B/M portfolio allocation back from July Y to June Y+1
BRIC.maindata <- merge(BRIC.maindata,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.maindata[ , pf.bm := ifelse(BM>bm_bb70,"High",ifelse((BM<=bm_bb70 & BM>bm_bb30),"Neutral",ifelse(BM<=bm_bb30,"Low",NA)))]
BRIC.maindata[, SIZE_VALUE := paste0(pf.size,".",pf.bm)]
```
##4.7 RMW: Determine OP/BE breakpoints
```{r}
# Determine the OP/BE breakpoints based on big stocks only
hlpvariable2 <- BRIC.maindata[month==7 & !is.na(OPBE) & pf.size=="Big", .(opbe_bb30 = quantile(OPBE , probs = c(0.3), na.rm=T),
opbe_bb70 = quantile(OPBE , probs = c(0.7), na.rm=T)),by=year]
# Merge the OP/BE portfolio allocation back from July Y to June Y+1
BRIC.maindata <- merge(BRIC.maindata,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
# 3 OP/BE brackets: Robust, Neutral and Weak
BRIC.maindata[ , pf.opbe := ifelse(OPBE>opbe_bb70,"Robust",ifelse((OPBE<=opbe_bb70 & OPBE>opbe_bb30),"Neutral",ifelse(OPBE<=opbe_bb30,"Weak",NA)))]
BRIC.maindata[, SIZE_PROFITABILITY := paste0(pf.size,".",pf.opbe)]
```
##4.8 Calculate CMA
investment: As in Cooper et al. (2008), we measure asset growth in June of year y as the percentage change in total assets (WC02999) from fiscal year ending in calendar year y−2 to fiscal year ending in calendar year y−1.
```{r}
# Determine the AC breakpoints based on big stocks only
hlpvariable2 <- BRIC.maindata[month==7 & !is.na(AssetChange) & pf.size=="Big", .(ac_bb30 = quantile(AssetChange , probs = c(0.3), na.rm=T),
ac_bb70 = quantile(AssetChange , probs = c(0.7), na.rm=T)),by=year]
# Merge the AC portfolio allocation back from July Y to June Y+1
BRIC.maindata <- merge(BRIC.maindata,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
# 3 investment brackets: Aggressive, neutral and conservative
BRIC.maindata[ , pf.ac := ifelse(AssetChange>ac_bb70,"Aggressive",ifelse((AssetChange<=ac_bb70 & AssetChange>ac_bb30),"Neutral",ifelse(AssetChange<=ac_bb30,"Conservative",NA)))]
BRIC.maindata[, SIZE_INVESTMENT := paste0(pf.size,".",pf.ac)]
```
https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/f-f_5_factors_2x3.html
##4.9 Calculate Factors
```{r}
# HML ----
portfolio_hml <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.bm)] %>% # this operator nests functions
group_by(ym,SIZE_VALUE) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_VALUE,ret.port) %>% # create one column for each group
mutate(
Small = (Small.High + Small.Neutral + Small.Low)/3, # just exemplary
Big = (Big.High + Big.Neutral + Big.Low)/3,
SMB_HML = Small-Big,
High = (Small.High + Big.High)/2,
Low = (Small.Low + Big.Low)/2,
HML = High-Low
)
portfolio_hml <- as.data.table(portfolio_hml)
# RMW ----
portfolio_rmw <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.opbe)] %>% # this operator nests functions
group_by(ym,SIZE_PROFITABILITY) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_PROFITABILITY,ret.port) %>% # create one column for each group
mutate(
Small = (Small.Robust + Small.Neutral + Small.Weak)/3, # just exemplary
Big = (Big.Robust + Big.Neutral + Big.Weak)/3,
SMB_RMW = Small-Big,
Robust = (Small.Robust + Big.Robust)/2,
Weak = (Small.Weak + Big.Weak)/2,
RMW = Robust - Weak
)
portfolio_rmw <- as.data.table(portfolio_rmw)
# CMA ----
portfolio_cma <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.ac)] %>% # this operator nests functions
group_by(ym,SIZE_INVESTMENT) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_INVESTMENT,ret.port) %>% # create one column for each group
mutate(
Small = (Small.Aggressive + Small.Neutral + Small.Conservative)/3, # just exemplary
Big = (Big.Aggressive + Big.Neutral + Big.Conservative)/3,
SMB_CMA = Small-Big,
Aggressive = (Small.Aggressive + Big.Aggressive)/2,
Conservative = (Small.Conservative + Big.Conservative)/2,
CMA = Conservative - Aggressive
)
portfolio_cma <- as.data.table(portfolio_cma)
# MOM ----
portfolio_mom <- BRIC.maindata[!is.na(pf.momentum)] %>%
group_by(ym,pf.momentum) %>%
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>%
spread(pf.momentum,ret.port) %>%
mutate(
MOM = Winner - Looser
)
portfolio_mom <- as.data.table(portfolio_mom)
factors <- inner_join(x = portfolio_hml, y = portfolio_rmw, by = "ym")
factors <- inner_join(x = factors, y = portfolio_cma, by = "ym")
factors <- inner_join(x = factors, y = portfolio_mom, by = "ym")
factors <- subset(factors, select = c("ym","CMA","HML","RMW","SMB_HML","SMB_RMW","SMB_CMA","MOM"))
factors$SMB <- ((factors$SMB_HML + factors$SMB_RMW + factors$SMB_CMA)/3)
factors <- subset(factors, select = c("ym","CMA","HML","RMW","SMB","MOM"))
summary(factors)
```
ISIN: International Security Identification Number (stock identifier)
ESTAT: active vs inactive company (publicly listed or not)
Id: join column with BRIC.yearly dataframe
INDM: industry sector code
GEOGN: geographic group name
GEOLN: geographic location
List of Database codes:
https://www.bwl.uni-mannheim.de/media/Lehrstuehle/bwl/Maug/Database_info/Datastream_dataypes.pdf
ID: ??
Country: 4 BRIC COUNTRY CODES
ICBSUC: industrial classification benchmark
https://link.springer.com/content/pdf/bbm%3A978-3-8350-9531-1%2F1.pdf
WC07021: SIC(standard industrial classification) primary code from Worldscope
W05651: Common Shares Traded - Annual (Security)
*TO DO's*:
- Calculate Benchmark (market-cap weighted big stocks of the BRIC region) || DONE
- Calculate break points on big stocks || DONE
- decide on strategy and implement it || WORKING
- calculate portfolio characteristics
- visualize and showcase strategy performance
- regress strategy PF on FF5FM and momentum for style exposure analysis
- Literature || WIP
- sorting A-shares ... how to identify them? || DONE
*Project Dates*:
Thesis submission: June 21
Final presentation: June 07
*Strategy*:
GDP weighted countries; stock level: max sharpe ratio, min volatility, equal sector weights or quotas, momentum?
EDA
To DO: compute correlations by sector (10 sectors)
```{r}
# regular correlation matrix of all (four) numeric attributes
cor(select(BRIC.static, where(is.numeric)))
```
**Some conventions:**
Characteristic should be calculated as in Hanauer & Lauterbach (2019) or in Hanauer (2020)
Big stocks should be defined as the biggest stocks which together account for 90% of a
country's aggregated market capitalization
Benchmark should be defined as the cap-weighted universe of big stocks
Returns should be in USD
Breakpoints (for Fama-French factors) should be calculated on big stocks (as in the
excursus) but both small and big stocks go into the factor calculation.
#5.STRATEGY - Multifactor Portfolio sort
Momentum sorting is done during #2.
##5.1 Value Breakpoints
```{r}
BRIC.strategy <- BRIC.maindata
colnames(BRIC.strategy)
## Value factor
## creating a large cap and high B/M ratio column (large cap value)
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# subsetting only value stocks (cutoff = median) Look up CUTOFF details
# Determine the value breakpoints
hlpvariable2 <- BRIC.maindata[month==7, .(median = quantile(BM , probs = c(0.5), na.rm=T)),by=year]
# Merge the value portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median,"Value",(ifelse(BM<=median,"Growth",NA)))]
table(BRIC.strategy$pf.value)
dim(BRIC.strategy)
```
##5.2 Low Vol
Strategy implementation on the balanced panel data (Multifactor etf)
```{r}
# Determine the low_vol breakpoints based on big stocks only
hlpvariable2 <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
# Merge the low_vol portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
table(BRIC.strategy$pf.low_vol)
dim(BRIC.strategy)
```
##5.3 Filtering for strategy requirements
```{r}
# filtering for growth stocks
BRIC.strategy <- subset(BRIC.strategy, pf.value == "Growth" )
# filtering for lowVol stocks
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
# filtering for winner stocks
BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
dim(BRIC.strategy)
summary(BRIC.strategy)
```
## 5.4 Statistics on Strategy portfolio
```{r}
strat.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
colnames(strat.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
strategy.avgNumberOfStocks <- sum(strat.EqualWeights$NumberOfStocks)/length(strat.EqualWeights$NumberOfStocks)
bench.EqualWeights <- aggregate(Id ~ ym, data = BRIC.benchmark, FUN=function(x) length(unique(x)))
colnames(bench.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
benchmark.avgNumberOfStocks <- sum(bench.EqualWeights$NumberOfStocks)/length(bench.EqualWeights$NumberOfStocks)
```
#6 Portfolio Statistics
All teams should perform the following analyses:
- A clear description of the strategy design (approach, weighting, rebalancing,...)
- Portfolio characteristics (ann. turnover, avg. number of stocks, portfolio concentration)
- Performance statistics (return, volatility, Sharpe ratio, outperformance, tracking error,
information ratio, all annualized)
- Visualize cumulative performance and outperformance
- Regress portfolio performance on FF5FM + Momentum for style analysis
- Provide the time-series of the your strategy, the benchmark, and Fama-French factors as
RData file
# mean return of whole period
benchmark.retBricT <- mean(benchmark.retBricY$wRet)
# mean excess return of whole period
benchmark.retExBricT <- mean(benchmark.retBricY$wExRet)
# STANDARD DEVIATION
# we calculate the sd out of the annualised portfolio returns
benchmark.sdBricT <- sd(benchmark.retBricY$wRet)
# SHARP RATIO
benchmark.srBricT <- benchmark.retExBricT/benchmark.sdBricT
# MAX DRAWDOWN
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- benchmark.retBricY$wRet
benchmark.mdBricT <- maxdrawdown(ret)
# TRACKING ERROR
# merge portfolio returns and benchmark returns
benchmark_benchmark <- inner_join(x = benchmark.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(benchmark_benchmark)[2] <- "wRet_benchmark"
colnames(benchmark_benchmark)[3] <- "wExRet_benchmark"
colnames(benchmark_benchmark)[4] <- "wRet_benchmark"
colnames(benchmark_benchmark)[5] <- "wExRet_benchmark"
benchmark_benchmark$pf_activeReturn <- benchmark_benchmark$wRet_benchmark - benchmark_benchmark$wRet_benchmark
benchmark.teBricT <- sd(benchmark_benchmark$pf_activeReturn)
# INFROMATION RATIO
benchmark.irBricT <- mean(benchmark_benchmark$pf_activeReturn)/benchmark.teBricT
# TOP 10 ----
benchmark_topTen <- BRIC.benchmark %>% arrange(desc(ValueWeight)) %>% group_by(ym) %>% top_n(wt=ValueWeight,10)
benchmark.topTenBricY <- aggregate(ValueWeight ~ ym, data = benchmark_topTen, FUN = sum)
benchmark.topTenBricT <- mean(benchmark.topTenBricY$ValueWeight)
# mean return of whole period
benchmark.retBricT <- mean(benchmark.retBricY$wRet)
# mean excess return of whole period
benchmark.retExBricT <- mean(benchmark.retBricY$wExRet)
# STANDARD DEVIATION
# we calculate the sd out of the annualised portfolio returns
benchmark.sdBricT <- sd(benchmark.retBricY$wRet)
# SHARP RATIO
benchmark.srBricT <- benchmark.retExBricT/benchmark.sdBricT
# MAX DRAWDOWN
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- benchmark.retBricY$wRet
benchmark.mdBricT <- maxdrawdown(ret)
# TRACKING ERROR
# merge portfolio returns and benchmark returns
benchmark_benchmark <- inner_join(x = benchmark.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(benchmark_benchmark)[2] <- "wRet_benchmark"
colnames(benchmark_benchmark)[3] <- "wExRet_benchmark"
colnames(benchmark_benchmark)[4] <- "wRet_benchmark"
colnames(benchmark_benchmark)[5] <- "wExRet_benchmark"
benchmark_benchmark$pf_activeReturn <- benchmark_benchmark$wRet_benchmark - benchmark_benchmark$wRet_benchmark
benchmark.teBricT <- sd(benchmark_benchmark$pf_activeReturn)
# INFROMATION RATIO
benchmark.irBricT <- mean(benchmark_benchmark$pf_activeReturn)/benchmark.teBricT
# TOP 10 ----
benchmark_topTen <- BRIC.benchmark %>% arrange(desc(ValueWeight)) %>% group_by(ym) %>% top_n(wt=ValueWeight,10)
benchmark.topTenBricY <- aggregate(ValueWeight ~ ym, data = benchmark_topTen, FUN = sum)
benchmark.topTenBricT <- mean(benchmark.topTenBricY$ValueWeight)
# assign a new working variable
strategy <- BRIC.strategy
# value weight returns
## calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
## calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
## calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
# TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
# RETURNS ----
# per month
strategy.retBricM <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.111509 %
# STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 37.155688
# SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.352880
# MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret) # -99.1467
# TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 26.831411 %
# INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.26754
# join factors, strategy and benchmark ----
spanning_1 <- left_join(x = factors, y = strategy.retBricM, by = "ym")
spanning <- left_join(x = spanning_1, y = market.retBricM, by = "ym")
colnames(spanning)[8] <- "Strategy_RET"
colnames(spanning)[9] <- "Strategy_RiRF"
colnames(spanning)[11] <- "Market_RET"
colnames(spanning)[12] <- "Market_RiRF"
# correlation matrix between factors
head(spanning)
dim(spanning) # 280 (24 years * 12 months) x 5
## cor(spanning[,-"ym"]) # correlation matrix between factors for the BRIC region
summary(spanning) # to use for a table
# Spanning Tests ----
## FF3FM
summary(lm(data=spanning, formula = Strategy_RiRF ~ Market_RiRF + SMB + HML))
## FF5FM
summary(lm(data=spanning, formula = Strategy_RiRF ~ Market_RiRF + SMB + HML + CMA + RMW))
## FF3FM + MOM
summary(lm(data=spanning, formula = Strategy_RiRF ~ Market_RiRF + SMB + HML + MOM))
## FF5FM + MOM
summary(lm(data=spanning, formula = Strategy_RiRF ~ Market_RiRF + SMB + HML + CMA + RMW + MOM))
# Strategy vs benchmark plots
dim(benchmark.retBricM)
dim(strategy.retBricM)
# inner join
bm_plot_df <- inner_join(x=benchmark.retBricM, y=strategy.retBricM, by="ym")
bm_plot_df
# zoo objects for cummulative performance
benchmark.zoo <- zoo(bm_plot_df$wRet.x) # zoo object
# cummulative performance of 1 EUR
bm_plot_df$bm.cum_ret <- cumsum(log(1+benchmark.zoo/100)) # cum log returns
strategy.zoo <- zoo(bm_plot_df$wRet.y)
bm_plot_df$strat.cum_ret = cumsum(log(1+strategy.zoo/100))
# creating a dataframe for plotting the cummulative returns
df_new <- data.frame(bm.cret = as.vector(bm_plot_df$bm.cum_ret),
strat.cret = as.vector(bm_plot_df$strat.cum_ret),
time = bm_plot_df$ym)
# saving the plot as a jpeg file
jpeg("strategy_vs_bm_plot.jpeg", width = 480, height = 480) # height and width can be chosen as your wish
# strategy returns vs big stocks benchmark
strategy_vs_bm_returns <- ggplot(data = bm_plot_df, aes(x = ym)) +
geom_line(aes(y = bm.cum_ret, colour="bm.cum_ret")) +
geom_line(aes(y = strat.cum_ret, colour="strat.cum_ret")) +
labs(y= "cummulative performance", x = "Year", title ="Monthly excess returns Strategy vs Benchmark") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Portfolio",
breaks = c("bm.cum_ret", "strat.cum_ret"),
labels= c("Benchmark","Strategy"), # legend label names
values = c("red", "green"))
strategy_vs_bm_returns
# second part of the code that creates the jpeg file of the plot
dev.off()
# factor return plots
library(ggplot2)
cma.zoo <- zoo(factors$CMA) # zoo object
factors$cma.cum_ret = cumsum(log(1+cma.zoo/100)) # cum log returns
hml.zoo <- zoo(factors$HML)
factors$hml.cum_ret = cumsum(log(1+hml.zoo/100))
rmw.zoo <- zoo(factors$RMW)
factors$rmw.cum_ret = cumsum(log(1+rmw.zoo/100))
smb.zoo <- zoo(factors$SMB)
factors$smb.cum_ret = cumsum(log(1+smb.zoo/100))
# creating a dataframe for plotting the cummulative returns
df_new <- data.frame(cma.cret = as.vector(factors$cma.cum_ret),
smb.cret = as.vector(factors$smb.cum_ret),
hml.cret = as.vector(factors$hml.cum_ret),
rmw.cret = as.vector(factors$rmw.cum_ret),
time = as.Date(factors$ym))
# plot of the factor returns (log scale)
cum_rets <- ggplot(data = df_new, aes(x = time))   +
geom_line(aes(y = smb.cret, colour="smb.cret")) +
geom_line(aes(y = hml.cret, colour="hml.cret")) +
geom_line(aes(y = rmw.cret, colour="rmw.cret")) +
geom_line(aes(y = cma.cret, colour="cma.cret")) +
labs(y= "cum. log return", x = "Year", title ="Monthly cum. factor log returns") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Factor",
breaks = c("smb.cret", "hml.cret", "rmw.cret", "cma.cret"),
values = c("red", "green", "blue","orange"))
cum_rets
# factor returns (regular scale)
factor_returns <- ggplot(data = factors, aes(x = ym)) +
geom_line(aes(y = SMB, colour="SMB")) +
geom_line(aes(y = HML, colour="HML")) +
geom_line(aes(y = RMW, colour="RMW")) +
geom_line(aes(y = CMA, colour="CMA")) +
labs(y= "country weight", x = "Year", title ="Monthly factor returns") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Country weight",
breaks = c("SMB", "HML", "RMW", "CMA"),
values = c("red", "green", "blue","orange"))
factor_returns
weight <- strategy$Weight
rets <- strategy$RET.USD
port_ret <- strategy$Id
#Create a function
pturnoverDN  = function(weight,rets,port_ret){
weight[is.na(weight)] <- 0  # NAs = 0
weighteop = weight*(1+rets)/(1+port_ret)
dweight = abs(weight-lag(weighteop,1))
out = (rowSums( dweight) )
return(out)
}
PortRet =apply(datar*ws,1,sum) # compute returns
turnover <- aggregate(Id ~,data = BRIC.strategy, FUN=function(x) length(unique(x)))
turnover <- aggregate(Id ~ ,data = BRIC.strategy, FUN=function(x) length(unique(x)))
turnover <- aggregate(Id ~ ,data = BRIC.strategy, FUN=unique())
turnover <- aggregate(Id ~ .,data = BRIC.strategy, FUN=function(x) length(unique(x)))
str <- BRIC.strategy
turnover <- subset(str,c("Id"))
str <- BRIC.strategy
turnover <- subset(str,c("Id"))
str <- BRIC.strategy
turnover <- subset(str,select = "Id")
turnover <- length(unique(str$Id))

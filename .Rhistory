HML_DEVIL = High-Low
)
portfolio_hmldevil <- as.data.table(portfolio_hmldevil)
# RMW ----
portfolio_rmw <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.opbe)] %>% # this operator nests functions
group_by(ym,SIZE_PROFITABILITY) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_PROFITABILITY,ret.port) %>% # create one column for each group
mutate(
Small = (Small.Robust + Small.Neutral + Small.Weak)/3, # just exemplary
Big = (Big.Robust + Big.Neutral + Big.Weak)/3,
SMB_RMW = Small-Big,
Robust = (Small.Robust + Big.Robust)/2,
Weak = (Small.Weak + Big.Weak)/2,
RMW = Robust - Weak
)
portfolio_rmw <- as.data.table(portfolio_rmw)
# CMA ----
portfolio_cma <- BRIC.maindata[!is.na(pf.size) & !is.na(pf.ac)] %>% # this operator nests functions
group_by(ym,SIZE_INVESTMENT) %>% # do "everything" for the groups specified here
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>% # vw returns using lagged mcap
spread(SIZE_INVESTMENT,ret.port) %>% # create one column for each group
mutate(
Small = (Small.Aggressive + Small.Neutral + Small.Conservative)/3, # just exemplary
Big = (Big.Aggressive + Big.Neutral + Big.Conservative)/3,
SMB_CMA = Small-Big,
Aggressive = (Small.Aggressive + Big.Aggressive)/2,
Conservative = (Small.Conservative + Big.Conservative)/2,
CMA = Conservative - Aggressive
)
portfolio_cma <- as.data.table(portfolio_cma)
# MOM ----
portfolio_mom <- BRIC.maindata[!is.na(pf.momentum)] %>%
group_by(ym,pf.momentum) %>%
summarize(ret.port = weighted.mean(RET.USD,
LMV.USD)) %>%
spread(pf.momentum,ret.port) %>%
mutate(
MOM = Winner - Looser
)
portfolio_mom <- as.data.table(portfolio_mom)
factors <- inner_join(x = portfolio_hml, y = portfolio_rmw, by = "ym")
factors <- inner_join(x = factors, y = portfolio_cma, by = "ym")
factors <- inner_join(x = factors, y = portfolio_mom, by = "ym")
factors <- inner_join(x = factors, y = portfolio_hmldevil, by = "ym")
factors <- inner_join(x = factors, y = market.retBricM, by = "ym")
colnames(factors)[55] <- "RMRF"
View(factors)
factors <- subset(factors, select = c("ym","RMRF","CMA","HML","HML_DEVIL","RMW","SMB_HML","SMB_RMW","SMB_CMA","MOM"))
factors$SMB <- ((factors$SMB_HML + factors$SMB_RMW + factors$SMB_CMA)/3)
factors <- subset(factors, select = c("ym","RMRF","SMB","HML","HML_DEVIL","RMW","CMA","MOM"))
summary(factors)
View(factors)
BRIC.strategy <- BRIC.maindata
colnames(BRIC.strategy)
## Value factor
## creating a large cap and high B/M ratio column (large cap value)
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# subsetting only value stocks (cutoff = median) Look up CUTOFF details
# Determine the value breakpoints
hlpvariable2 <- BRIC.maindata[month==7, .(median = quantile(BM , probs = c(0.5), na.rm=T)),by=year]
# Merge the value portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median,"Value",(ifelse(BM<=median,"Growth",NA)))]
table(BRIC.strategy$pf.value)
dim(BRIC.strategy)
# Determine the low_vol breakpoints based on big stocks only
hlpvariable2 <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
# Merge the low_vol portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
table(BRIC.strategy$pf.low_vol)
dim(BRIC.strategy)
# filtering for growth stocks
BRIC.strategy <- subset(BRIC.strategy, pf.value == "Growth" )
# filtering for lowVol stocks
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
# filtering for winner stocks
BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
dim(BRIC.strategy)
summary(BRIC.strategy)
View(BRIC.strategy)
strat.EqualWeights <- aggregate(Id ~ ym, data = BRIC.strategy, FUN=function(x) length(unique(x)))
colnames(strat.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
strategy.avgNumberOfStocks <- sum(strat.EqualWeights$NumberOfStocks)/length(strat.EqualWeights$NumberOfStocks)
bench.EqualWeights <- aggregate(Id ~ ym, data = BRIC.benchmark, FUN=function(x) length(unique(x)))
colnames(bench.EqualWeights)[2] <- "NumberOfStocks"
# average number of stocks
benchmark.avgNumberOfStocks <- sum(bench.EqualWeights$NumberOfStocks)/length(bench.EqualWeights$NumberOfStocks)
# assign a new working variable
strategy <- BRIC.strategy
# value weight returns
## calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
## calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
## calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
# TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
# RETURNS ----
# per month
strategy.retBricM_intermediate <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# add risk-free rate if there's no investment in a month
# risk_free rate for investment horizon
risk_free <- subset(one_m_tbill,ym >= "Jul 1996" & ym <= "Okt 2018")
# add hcjun
risk_free$year <- as.numeric(format(risk_free$ym, "%Y"))
risk_free$month <- as.numeric(format(risk_free$ym, "%m"))
risk_free <- data.table(risk_free)
risk_free[,hcjun := ifelse(month>=7,year,year-1)]
# left join risk_free rate and retBricM_intermediate
strategy.retBricM <- left_join(x = risk_free, y = strategy.retBricM_intermediate, by = "ym")
# exchange wExRet with 0 if na and wRet with RF if na
strategy.retBricM$wExRet <- strategy.retBricM$wExRet %>% replace_na(0)
strategy.retBricM[,wRetNew := ifelse(!is.na(wRet),wRet,RF)]
strategy.retBricM$wRet <- as.double(strategy.retBricM$wRetNew)
# rename
colnames(strategy.retBricM)[5] <- "hcjun"
strategy.retBricM <- subset(strategy.retBricM, select = c("ym","hcjun","wRet","wExRet"))
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.111509 %
# STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 37.155688
# SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.352880
# MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret) # -99.1467
# TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 26.831411 %
# INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.26754
# mean return of whole period
benchmark.retBricT <- mean(benchmark.retBricY$wRet)
# mean excess return of whole period
benchmark.retExBricT <- mean(benchmark.retBricY$wExRet)
# STANDARD DEVIATION
# we calculate the sd out of the annualised portfolio returns
benchmark.sdBricT <- sd(benchmark.retBricY$wRet)
# SHARP RATIO
benchmark.srBricT <- benchmark.retExBricT/benchmark.sdBricT
# MAX DRAWDOWN
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- benchmark.retBricY$wRet
benchmark.mdBricT <- maxdrawdown(ret)
# TRACKING ERROR
# merge portfolio returns and benchmark returns
benchmark_benchmark <- inner_join(x = benchmark.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(benchmark_benchmark)[2] <- "wRet_benchmark"
colnames(benchmark_benchmark)[3] <- "wExRet_benchmark"
colnames(benchmark_benchmark)[4] <- "wRet_benchmark"
colnames(benchmark_benchmark)[5] <- "wExRet_benchmark"
benchmark_benchmark$pf_activeReturn <- benchmark_benchmark$wRet_benchmark - benchmark_benchmark$wRet_benchmark
benchmark.teBricT <- sd(benchmark_benchmark$pf_activeReturn)
# INFROMATION RATIO
benchmark.irBricT <- mean(benchmark_benchmark$pf_activeReturn)/benchmark.teBricT
# TOP 10 ----
benchmark_topTen <- BRIC.benchmark %>% arrange(desc(ValueWeight)) %>% group_by(ym) %>% top_n(wt=ValueWeight,10)
benchmark.topTenBricY <- aggregate(ValueWeight ~ ym, data = benchmark_topTen, FUN = sum)
benchmark.topTenBricT <- mean(benchmark.topTenBricY$ValueWeight)
rownames(differentStrategies.BRIC) <- c("Benchmark", "3F","V", "GLV","GMOM","LVMOM","G","LV","MOM")
# factor return plots
library(ggplot2)
cma.zoo <- zoo(factors$CMA) # zoo object
factors$cma.cum_ret = cumsum(log(1+cma.zoo/100)) # cum log returns
hml.zoo <- zoo(factors$HML)
factors$hml.cum_ret = cumsum(log(1+hml.zoo/100))
rmw.zoo <- zoo(factors$RMW)
factors$rmw.cum_ret = cumsum(log(1+rmw.zoo/100))
smb.zoo <- zoo(factors$SMB)
factors$smb.cum_ret = cumsum(log(1+smb.zoo/100))
hml_devil.zoo <- zoo(factors$HML_DEVIL)
factors$hml_devil.cum_ret = cumsum(log(1+hml_devil.zoo/100))
rmrf.zoo <- zoo(factors$RMRF)
factors$rmrf.cum_ret = cumsum(log(1+rmrf.zoo/100))
# creating a dataframe for plotting the cummulative returns
df_new <- data.frame(cma.cret = as.vector(factors$cma.cum_ret),
rmrf.cret = as.vector(factors$rmrf.cum_ret),
smb.cret = as.vector(factors$smb.cum_ret),
hml.cret = as.vector(factors$hml.cum_ret),
hml_devil.cret = as.vector(factors$hml_devil.cum_ret),
rmw.cret = as.vector(factors$rmw.cum_ret),
time = as.Date(factors$ym))
# plot of the factor returns (log scale)
cum_rets <- ggplot(data = df_new, aes(x = time))   +
geom_line(aes(y = rmrf.cret, colour="rmrf.cret")) +
geom_line(aes(y = smb.cret, colour="smb.cret")) +
geom_line(aes(y = hml.cret, colour="hml.cret")) +
geom_line(aes(y = hml_devil.cret, colour="hml_devil.cret")) +
geom_line(aes(y = rmw.cret, colour="rmw.cret")) +
geom_line(aes(y = cma.cret, colour="cma.cret")) +
labs(y= "cum. log return", x = "Year", title ="Monthly cum. factor log returns") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Factor",
breaks = c("smb.cret", "hml.cret", "rmw.cret", "cma.cret"),
values = c("red", "green", "blue","orange"))
cum_rets
cum_rets
# factor return plots
library(ggplot2)
cma.zoo <- zoo(factors$CMA) # zoo object
factors$cma.cum_ret = cumsum(log(1+cma.zoo/100)) # cum log returns
hml.zoo <- zoo(factors$HML)
factors$hml.cum_ret = cumsum(log(1+hml.zoo/100))
rmw.zoo <- zoo(factors$RMW)
factors$rmw.cum_ret = cumsum(log(1+rmw.zoo/100))
smb.zoo <- zoo(factors$SMB)
factors$smb.cum_ret = cumsum(log(1+smb.zoo/100))
hml_devil.zoo <- zoo(factors$HML_DEVIL)
factors$hml_devil.cum_ret = cumsum(log(1+hml_devil.zoo/100))
rmrf.zoo <- zoo(factors$RMRF)
factors$rmrf.cum_ret = cumsum(log(1+rmrf.zoo/100))
# creating a dataframe for plotting the cummulative returns
df_new <- data.frame(cma.cret = as.vector(factors$cma.cum_ret),
rmrf.cret = as.vector(factors$rmrf.cum_ret),
smb.cret = as.vector(factors$smb.cum_ret),
hml.cret = as.vector(factors$hml.cum_ret),
hml_devil.cret = as.vector(factors$hml_devil.cum_ret),
rmw.cret = as.vector(factors$rmw.cum_ret),
time = as.Date(factors$ym))
# plot of the factor returns (log scale)
cum_rets <- ggplot(data = df_new, aes(x = time))   +
geom_line(aes(y = rmrf.cret, colour="rmrf.cret")) +
geom_line(aes(y = smb.cret, colour="smb.cret")) +
geom_line(aes(y = hml.cret, colour="hml.cret")) +
geom_line(aes(y = hml_devil.cret, colour="hml_devil.cret")) +
geom_line(aes(y = rmw.cret, colour="rmw.cret")) +
geom_line(aes(y = cma.cret, colour="cma.cret")) +
labs(y= "cum. log return", x = "Year", title ="Monthly cum. factor log returns") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Factor",
breaks = c("rmrf.cret","smb.cret", "hml.cret","hml_devil.cret", "rmw.cret", "cma.cret"),
values = c("black","red", "green","yellow", "blue","orange"))
cum_rets
# factor returns (regular scale)
factor_returns <- ggplot(data = factors, aes(x = ym)) +
geom_line(aes(y = RMRF, colour="RMRF")) +
geom_line(aes(y = SMB, colour="SMB")) +
geom_line(aes(y = HML, colour="HML")) +
geom_line(aes(y = HML_Devil, colour="HML_Devil")) +
geom_line(aes(y = RMW, colour="RMW")) +
geom_line(aes(y = CMA, colour="CMA")) +
labs(y= "country weight", x = "Year", title ="Monthly factor returns") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Country weight",
breaks = c("RMRF","SMB", "HML","HML_Devil", "RMW", "CMA"),
values = c("black","red", "green","yellow", "blue","orange"))
factor_returns
# factor return plots
library(ggplot2)
cma.zoo <- zoo(factors$CMA) # zoo object
factors$cma.cum_ret = cumsum(log(1+cma.zoo/100)) # cum log returns
hml.zoo <- zoo(factors$HML)
factors$hml.cum_ret = cumsum(log(1+hml.zoo/100))
rmw.zoo <- zoo(factors$RMW)
factors$rmw.cum_ret = cumsum(log(1+rmw.zoo/100))
smb.zoo <- zoo(factors$SMB)
factors$smb.cum_ret = cumsum(log(1+smb.zoo/100))
hml_devil.zoo <- zoo(factors$HML_DEVIL)
factors$hml_devil.cum_ret = cumsum(log(1+hml_devil.zoo/100))
rmrf.zoo <- zoo(factors$RMRF)
factors$rmrf.cum_ret = cumsum(log(1+rmrf.zoo/100))
# creating a dataframe for plotting the cummulative returns
df_new <- data.frame(cma.cret = as.vector(factors$cma.cum_ret),
rmrf.cret = as.vector(factors$rmrf.cum_ret),
smb.cret = as.vector(factors$smb.cum_ret),
hml.cret = as.vector(factors$hml.cum_ret),
hml_devil.cret = as.vector(factors$hml_devil.cum_ret),
rmw.cret = as.vector(factors$rmw.cum_ret),
time = as.Date(factors$ym))
# plot of the factor returns (log scale)
cum_rets <- ggplot(data = df_new, aes(x = time))   +
geom_line(aes(y = rmrf.cret, colour="rmrf.cret")) +
geom_line(aes(y = smb.cret, colour="smb.cret")) +
geom_line(aes(y = hml.cret, colour="hml.cret")) +
geom_line(aes(y = hml_devil.cret, colour="hml_devil.cret")) +
geom_line(aes(y = rmw.cret, colour="rmw.cret")) +
geom_line(aes(y = cma.cret, colour="cma.cret")) +
labs(y= "cum. log return", x = "Year", title ="Monthly cum. factor log returns") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Factor",
breaks = c("rmrf.cret","smb.cret", "hml.cret","hml_devil.cret", "rmw.cret", "cma.cret"),
values = c("black","red", "green","yellow", "blue","orange"))
cum_rets
# factor returns (regular scale)
factor_returns <- ggplot(data = factors, aes(x = ym)) +
geom_line(aes(y = RMRF, colour="RMRF")) +
geom_line(aes(y = SMB, colour="SMB")) +
geom_line(aes(y = HML, colour="HML")) +
geom_line(aes(y = HML_DEVIL, colour="HML_DEVIL")) +
geom_line(aes(y = RMW, colour="RMW")) +
geom_line(aes(y = CMA, colour="CMA")) +
labs(y= "country weight", x = "Year", title ="Monthly factor returns") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Country weight",
breaks = c("RMRF","SMB", "HML","HML_DEVIL", "RMW", "CMA"),
values = c("black","red", "green","yellow", "blue","orange"))
factor_returns
rownames(differentStrategies.BRIC) <- c("Benchmark", "3F","V", "GLV","GMOM","LVMOM","G","LV","MOM")
# Strategy vs benchmark plots
dim(benchmark.retBricM)
dim(strategy.retBricM)
# inner join
bm_plot_df <- inner_join(x=benchmark.retBricM, y=strategy.retBricM, by="ym")
bm_plot_df
# zoo objects for cummulative performance
benchmark.zoo <- zoo(bm_plot_df$wRet.x) # zoo object
# cummulative performance of 1 EUR
bm_plot_df$bm.cum_ret <- cumsum(log(1+benchmark.zoo/100)) # cum log returns
strategy.zoo <- zoo(bm_plot_df$wRet.y)
bm_plot_df$strat.cum_ret = cumsum(log(1+strategy.zoo/100))
# creating a dataframe for plotting the cummulative returns
df_new <- data.frame(bm.cret = as.vector(bm_plot_df$bm.cum_ret),
strat.cret = as.vector(bm_plot_df$strat.cum_ret),
time = bm_plot_df$ym)
# saving the plot as a jpeg file
jpeg("strategy_vs_bm_plot.jpeg", width = 480, height = 480) # height and width can be chosen as your wish
# strategy returns vs big stocks benchmark
strategy_vs_bm_returns <- ggplot(data = bm_plot_df, aes(x = ym)) +
geom_line(aes(y = bm.cum_ret, colour="bm.cum_ret")) +
geom_line(aes(y = strat.cum_ret, colour="strat.cum_ret")) +
labs(y= "Cum. Log Returns", x = "Year", title ="Monthly Cum. Log Returns: 3FStrategy vs Benchmark") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Portfolio",
breaks = c("bm.cum_ret", "strat.cum_ret"),
labels= c("Benchmark","3FStrategy"), # legend label names
values = c("red", "green"))
strategy_vs_bm_returns
# second part of the code that creates the jpeg file of the plot
dev.off()
strategy_vs_bm_returns
BRIC.strategy <- BRIC.maindata
colnames(BRIC.strategy)
## Value factor
## creating a large cap and high B/M ratio column (large cap value)
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# subsetting only value stocks (cutoff = median) Look up CUTOFF details
# Determine the value breakpoints
hlpvariable2 <- BRIC.maindata[month==7, .(median = quantile(BM , probs = c(0.5), na.rm=T)),by=year]
# Merge the value portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median,"Value",(ifelse(BM<=median,"Growth",NA)))]
table(BRIC.strategy$pf.value)
dim(BRIC.strategy)
# Determine the low_vol breakpoints based on big stocks only
hlpvariable2 <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
# Merge the low_vol portfolio allocation back from July Y to June Y+1
BRIC.strategy <- merge(BRIC.strategy,hlpvariable2,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
table(BRIC.strategy$pf.low_vol)
dim(BRIC.strategy)
# filtering for growth stocks
BRIC.strategy <- subset(BRIC.strategy, pf.value == "Value" )
# filtering for lowVol stocks
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
# filtering for winner stocks
BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
dim(BRIC.strategy)
summary(BRIC.strategy)
# assign a new working variable
strategy <- BRIC.strategy
# value weight returns
## calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
## join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
## calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
## calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
# TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
# RETURNS ----
# per month
strategy.retBricM_intermediate <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# add risk-free rate if there's no investment in a month
# risk_free rate for investment horizon
risk_free <- subset(one_m_tbill,ym >= "Jul 1996" & ym <= "Okt 2018")
# add hcjun
risk_free$year <- as.numeric(format(risk_free$ym, "%Y"))
risk_free$month <- as.numeric(format(risk_free$ym, "%m"))
risk_free <- data.table(risk_free)
risk_free[,hcjun := ifelse(month>=7,year,year-1)]
# left join risk_free rate and retBricM_intermediate
strategy.retBricM <- left_join(x = risk_free, y = strategy.retBricM_intermediate, by = "ym")
# exchange wExRet with 0 if na and wRet with RF if na
strategy.retBricM$wExRet <- strategy.retBricM$wExRet %>% replace_na(0)
strategy.retBricM[,wRetNew := ifelse(!is.na(wRet),wRet,RF)]
strategy.retBricM$wRet <- as.double(strategy.retBricM$wRetNew)
# rename
colnames(strategy.retBricM)[5] <- "hcjun"
strategy.retBricM <- subset(strategy.retBricM, select = c("ym","hcjun","wRet","wExRet"))
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet) # 15.329091 %
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet) # 13.111509 %
# STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet) # 37.155688
# SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT # 0.352880
# MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret) # -99.1467
# TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn) # 26.831411 %
# INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT # 0.26754
# Strategy vs benchmark plots
dim(benchmark.retBricM)
dim(strategy.retBricM)
# inner join
bm_plot_df <- inner_join(x=benchmark.retBricM, y=strategy.retBricM, by="ym")
bm_plot_df
# zoo objects for cummulative performance
benchmark.zoo <- zoo(bm_plot_df$wRet.x) # zoo object
# cummulative performance of 1 EUR
bm_plot_df$bm.cum_ret <- cumsum(log(1+benchmark.zoo/100)) # cum log returns
strategy.zoo <- zoo(bm_plot_df$wRet.y)
bm_plot_df$strat.cum_ret = cumsum(log(1+strategy.zoo/100))
# creating a dataframe for plotting the cummulative returns
df_new <- data.frame(bm.cret = as.vector(bm_plot_df$bm.cum_ret),
strat.cret = as.vector(bm_plot_df$strat.cum_ret),
time = bm_plot_df$ym)
# saving the plot as a jpeg file
jpeg("strategy_vs_bm_plot.jpeg", width = 480, height = 480) # height and width can be chosen as your wish
# strategy returns vs big stocks benchmark
strategy_vs_bm_returns <- ggplot(data = bm_plot_df, aes(x = ym)) +
geom_line(aes(y = bm.cum_ret, colour="bm.cum_ret")) +
geom_line(aes(y = strat.cum_ret, colour="strat.cum_ret")) +
labs(y= "Cum. Log Returns", x = "Year", title ="Monthly Cum. Log Returns: 3FStrategy vs Benchmark") + # x and y axis lables and plot title
theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_colour_manual(name="Portfolio",
breaks = c("bm.cum_ret", "strat.cum_ret"),
labels= c("Benchmark","3FStrategy"), # legend label names
values = c("red", "green"))
strategy_vs_bm_returns
# second part of the code that creates the jpeg file of the plot
dev.off()
strategy_vs_bm_returns

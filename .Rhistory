s_lag_returns <-s_returns %>% mutate_at(vars(-"ym"),lag)
x.prevret<-reshape(s_lag_returns,
direction = "long",idvar = "ym")
colnames(x.prevret)[3]<-"RET.USDPrevPeriod"
library(reshape)
library(xts)
#Benchmark - Turnover ----
turnover_calc_benchmark <- BRIC.benchmark
#filtering out unnecessary columns
turnover_calc_benchmark <-subset(turnover_calc_benchmark,select= c("Id","ym","ValueWeight","RET.USD"))
turnover_calc_benchmark$RET.USD <- turnover_calc_benchmark$RET.USD*(1/100)
# lagging Weight to get xi,t-1
s_weights_benchmark<- subset(turnover_calc_benchmark,select= c("Id","ym","ValueWeight"))
s_weights_benchmark<-reshape(s_weights_benchmark, idvar = "ym", timevar = "Id", direction = "wide")
s_weights_benchmark[is.na(s_weights_benchmark)]=0
s_weights_benchmark<-as.data.frame(s_weights_benchmark)
s_lag_weights_benchmark <-s_weights_benchmark%>% mutate_at(vars(-"ym"),lag)
x.prevweight_benchmark<-reshape(s_lag_weights_benchmark,
direction = "long",idvar = "ym")
colnames(x.prevweight_benchmark)[3]<-"WeightPrevPeriod"
#lagging RET.USD to get ri,t-1
#from BRIC.monthly frame
load("/Users/cg/Desktop/TUM/SS21/Empirical Asset Pricing Seminar/Presentation/BRIC_Data/BRIC_monthly.RData")
View(BRIC.benchmark.valueWeights)
View(BRIC.benchmark)
library(reshape)
library(xts)
#Benchmark ----
turnover_calc_benchmark <- BRIC.benchmark
#filtering out unnecessary columns
turnover_calc_benchmark <-subset(turnover_calc_benchmark,select= c("Id","ym","ValueWeight","RET.USD"))
turnover_calc_benchmark$RET.USD <- turnover_calc_benchmark$RET.USD*(1/100)
# lagging Weight to get xi,t-1
s_weights_benchmark<- subset(turnover_calc_benchmark,select= c("Id","ym","ValueWeight"))
s_weights_benchmark<-reshape(s_weights_benchmark, idvar = "ym", timevar = "Id", direction = "wide")
s_weights_benchmark[is.na(s_weights_benchmark)]=0
s_weights_benchmark<-as.data.frame(s_weights_benchmark)
s_lag_weights_benchmark <-s_weights_benchmark%>% mutate_at(vars(-"ym"),lag)
x.prevweight_benchmark<-reshape(s_lag_weights_benchmark,
direction = "long",idvar = "ym")
colnames(x.prevweight_benchmark)[3]<-"WeightPrevPeriod"
#lagging RET.USD to get ri,t-1
s_returns_benchmark<-subset(turnover_calc_benchmark,select=c("Id","ym","RET.USD"))
#filtering for stocks in benchmark frame
s_returns_benchmark<-setDT(s_returns_benchmark)[Id %chin% turnover_calc_benchmark$Id]
s_returns_benchmark <-reshape(s_returns_benchmark, idvar = "ym", timevar = "Id", direction = "wide")
s_returns_benchmark [is.na(s_returns_benchmark)]=0
s_returns_benchmark <-as.data.frame(s_returns_benchmark)
s_lag_returns_benchmark <-s_returns_benchmark %>% mutate_at(vars(-"ym"),lag)
x.prevret_benchmark<-reshape(s_lag_returns_benchmark, direction = "long",idvar = "ym")
colnames(x.prevret_benchmark)[3]<-"RET.USDPrevPeriod"
x.prevret_benchmark$RET.USDPrevPeriod <- x.prevret_benchmark$RET.USDPrevPeriod*(1/100)
#leftjoining RET.USDPrevPeriod & WeightPrevPeriod to turnover_calc_benchmark (aka benchmark frame)
turnover_calc_benchmark<-left_join(turnover_calc_benchmark,x.prevweight_benchmark,by = c("Id","ym"))
turnover_calc_benchmark<-left_join(turnover_calc_benchmark,x.prevret_benchmark,by = c("Id","ym"))
turnover_calc_benchmark [is.na(turnover_calc_benchmark)]=0
#calculating x epsilon thin
#numerator
turnover_calc_benchmark$x_epsilon_numerator_benchmark <- turnover_calc_benchmark$WeightPrevPeriod * (1+turnover_calc_benchmark$RET.USDPrevPeriod)
x_epsilon_denominator_benchmark <-aggregate(x_epsilon_numerator_benchmark~ym,data = turnover_calc_benchmark,FUN = sum)
colnames(x_epsilon_denominator_benchmark)[2]<-"x_epsilon_denominator_benchmark"
turnover_calc_benchmark <-left_join(turnover_calc_benchmark,x_epsilon_denominator_benchmark,by="ym")
turnover_calc_benchmark$x_epsilon_benchmark <- turnover_calc_benchmark$x_epsilon_numerator_benchmark / turnover_calc_benchmark$x_epsilon_denominator_benchmark
turnover_calc_benchmark [is.na(turnover_calc_benchmark)]=0
turnover_calc_benchmark$turnover = (turnover_calc_benchmark$Weight - turnover_calc_benchmark$x_epsilon_benchmark)
turnover_calc_benchmark$turnover <- abs(turnover_calc_benchmark$turnover)
turnover_pattern_benchmark <- aggregate(turnover~ym,data = turnover_calc_benchmark,FUN = sum)
turnover_pattern_benchmark$turnover<- 0.5*turnover_pattern_benchmark$turnover
summary(turnover_pattern_benchmark$turnover)
benchmark.turnover<- mean(turnover_pattern_benchmark$turnover)
plot(x=turnover_pattern_benchmark$ym,y=turnover_pattern_benchmark$turnover)
# Strategy
turnover_calc_strategy <- BRIC.strategy
#filtering out unnecessary columns
turnover_calc_strategy <-subset(turnover_calc_strategy,select= c("Id","ym","Weight","RET.USD"))
View(BRIC.strategy)
## when using equal weights don't run until BREAK
# 6.1 Value weights ----
# value weight returns
# calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
# join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
# calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
BRIC.strategy <- BRIC.maindata
# 5.1 Value Breakpoints ----
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# 5.1.1 B/M Devil ----
helper <- BRIC.strategy[month==7, .(median_devil = quantile(BM_Devil , probs = c(0.5), na.rm=T)),by=year]
BRIC.strategy <- merge(BRIC.strategy,helper,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.growth := ifelse(BM_Devil>median_devil,"Value",(ifelse(BM_Devil<=median_devil,"Growth",NA)))]
# 5.1.2 normal B/M ----
helper <- BRIC.strategy[month==7, .(median_normal = quantile(BM, probs = c(0.5), na.rm=T)),by=year]
BRIC.strategy <- merge(BRIC.strategy,helper,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median_normal,"Value",(ifelse(BM<=median_normal,"Growth",NA)))]
# 5.2 Low Vol ----
helper <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
BRIC.strategy <- merge(BRIC.strategy,helper,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
# 5.3 Filtering ----
# filtering for growth or value stocks PLEASE COMMENT OUT and DECOMMENT OUT respectively
#BRIC.strategy <- subset(BRIC.strategy, pf.value == "Value" )
BRIC.strategy <- subset(BRIC.strategy, pf.growth == "Growth" )
# filtering for lowVol stocks
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
# filtering for winner stocks
#BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
# custom momentum
BRIC.strategy <- subset(BRIC.strategy, pf.customMomentum == "Winner" )
# assign new variable
strategy <- BRIC.strategy
## when using equal weights don't run until BREAK
# 6.1 Value weights ----
# value weight returns
# calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
# join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
# calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
# calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
## TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
## BREAK ... run from here when using equal weights
# 6.2 Strategy Statistics ----
## RETURNS ----
# per month
strategy.retBricM_intermediate <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# add risk-free rate if there's no investment in a month
# risk_free rate for investment horizon
risk_free <- subset(one_m_tbill,X1 >= 199606 & X1 <= 201810)
# add hcjun
risk_free$year <- as.numeric(format(risk_free$ym, "%Y"))
risk_free$month <- as.numeric(format(risk_free$ym, "%m"))
risk_free <- data.table(risk_free)
risk_free[,hcjun := ifelse(month>=7,year,year-1)]
# left join risk_free rate and retBricM_intermediate
strategy.retBricM <- left_join(x = risk_free, y = strategy.retBricM_intermediate, by = "ym")
# exchange wExRet with 0 if na and wRet with RF if na
strategy.retBricM$wExRet <- strategy.retBricM$wExRet %>% replace_na(0)
strategy.retBricM[,wRetNew := ifelse(!is.na(wRet),wRet,RF)]
strategy.retBricM$wRet <- as.double(strategy.retBricM$wRetNew)
# rename
colnames(strategy.retBricM)[6] <- "hcjun"
strategy.retBricM <- subset(strategy.retBricM, select = c("ym","hcjun","wRet","wExRet"))
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet)
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet)
## STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet)
## SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT
## MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret)
## TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn)
## INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT
## EFFECTIVE N ----
effectiveN <- subset(strategy,select = c("ym","Id","Weight"))
effectiveN$WeightSquare <- effectiveN$Weight * effectiveN$Weight
strategy.effectiveNM <- aggregate(WeightSquare ~ ym,data = effectiveN, FUN = sum)
strategy.effectiveNM$effN <- 1/strategy.effectiveNM$WeightSquare
strategy.effectiveNT <- mean(strategy.effectiveNM$effN)
# 6.3 Benchmark statistics ----
# mean return of whole period
benchmark.retBricT <- mean(benchmark.retBricY$wRet)
# mean excess return of whole period
benchmark.retExBricT <- mean(benchmark.retBricY$wExRet)
## STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
benchmark.sdBricT <- sd(benchmark.retBricY$wRet)
## SHARP RATIO ----
benchmark.srBricT <- benchmark.retExBricT/benchmark.sdBricT
## MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- benchmark.retBricY$wRet
benchmark.mdBricT <- maxdrawdown(ret)
## TRACKING ERROR ----
# merge portfolio returns and benchmark returns
benchmark_benchmark <- inner_join(x = benchmark.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(benchmark_benchmark)[2] <- "wRet_benchmark"
colnames(benchmark_benchmark)[3] <- "wExRet_benchmark"
colnames(benchmark_benchmark)[4] <- "wRet_benchmark"
colnames(benchmark_benchmark)[5] <- "wExRet_benchmark"
benchmark_benchmark$pf_activeReturn <- benchmark_benchmark$wRet_benchmark - benchmark_benchmark$wRet_benchmark
benchmark.teBricT <- sd(benchmark_benchmark$pf_activeReturn)
## INFROMATION RATIO ----
benchmark.irBricT <- mean(benchmark_benchmark$pf_activeReturn)/benchmark.teBricT
## TOP 10 ----
benchmark_topTen <- BRIC.benchmark %>% arrange(desc(ValueWeight)) %>% group_by(ym) %>% top_n(wt=ValueWeight,10)
benchmark.topTenBricY <- aggregate(ValueWeight ~ ym, data = benchmark_topTen, FUN = sum)
benchmark.topTenBricT <- mean(benchmark.topTenBricY$ValueWeight)
## EFFECTIVE N ----
effectiveNBe <- subset(BRIC.benchmark,select = c("ym","Id","ValueWeight"))
effectiveNBe$WeightSquare <- effectiveNBe$ValueWeight * effectiveNBe$ValueWeight
benchmark.effectiveNM <- aggregate(WeightSquare ~ ym,data = effectiveNBe, FUN = sum)
benchmark.effectiveNM$effN <- 1/benchmark.effectiveNM$WeightSquare
benchmark.effectiveNT <- mean(benchmark.effectiveNM$effN)
# Strategy
turnover_calc_strategy <- BRIC.strategy
#filtering out unnecessary columns
turnover_calc_strategy <-subset(turnover_calc_strategy,select= c("Id","ym","Weight","RET.USD"))
View(BRIC.strategy)
# Strategy
#filtering out unnecessary columns
turnover_calc_strategy <-subset(strategy,select= c("Id","ym","Weight","RET.USD"))
turnover_calc_strategy$RET.USD <- turnover_calc_strategy$RET.USD*(1/100)
# lagging Weight to get xi,t-1
s_weights_strategy<- subset(turnover_calc_strategy,select= c("Id","ym","Weight"))
s_weights_strategy<-reshape(s_weights_strategy, idvar = "ym", timevar = "Id", direction = "wide")
s_weights_strategy[is.na(s_weights_strategy)]=0
s_weights_strategy<-as.data.frame(s_weights_strategy)
s_lag_weights_strategy <-s_weights_strategy%>% mutate_at(vars(-"ym"),lag)
x.prevweight_strategy<-reshape(s_lag_weights_strategy,
direction = "long",idvar = "ym")
colnames(x.prevweight_strategy)[3]<-"WeightPrevPeriod"
#lagging RET.USD to get ri,t-1
s_returns_strategy<-subset(turnover_calc_strategy,select=c("Id","ym","RET.USD"))
#filtering for stocks in Strategy frame
s_returns_strategy<-setDT(s_returns_strategy)[Id %chin% turnover_calc_strategy$Id]
s_returns_strategy <-reshape(s_returns_strategy, idvar = "ym", timevar = "Id", direction = "wide")
s_returns_strategy [is.na(s_returns_strategy)]=0
s_returns_strategy <-as.data.frame(s_returns_strategy)
s_lag_returns_strategy <-s_returns_strategy %>% mutate_at(vars(-"ym"),lag)
x.prevret_strategy<-reshape(s_lag_returns_strategy, direction = "long",idvar = "ym")
colnames(x.prevret_strategy)[3]<-"RET.USDPrevPeriod"
x.prevret_strategy$RET.USDPrevPeriod <- x.prevret_strategy$RET.USDPrevPeriod*(1/100)
#leftjoining RET.USDPrevPeriod & WeightPrevPeriod to turnover_calc_strategy (aka strategy frame)
turnover_calc_strategy<-left_join(turnover_calc_strategy,x.prevweight_strategy,by = c("Id","ym"))
turnover_calc_strategy<-left_join(turnover_calc_strategy,x.prevret_strategy,by = c("Id","ym"))
turnover_calc_strategy [is.na(turnover_calc_strategy)]=0
#calculating x epsilon thing
#numerator
turnover_calc_strategy$x_epsilon_numerator_strategy <- turnover_calc_strategy$WeightPrevPeriod * (1+turnover_calc_strategy$RET.USDPrevPeriod)
x_epsilon_denominator_strategy <-aggregate(x_epsilon_numerator_strategy~ym,data = turnover_calc_strategy,FUN = sum)
colnames(x_epsilon_denominator_strategy)[2]<-"x_epsilon_denominator_strategy"
turnover_calc_strategy <-left_join(turnover_calc_strategy,x_epsilon_denominator_strategy,by="ym")
turnover_calc_strategy$x_epsilon_strategy <- turnover_calc_strategy$x_epsilon_numerator_strategy / turnover_calc_strategy$x_epsilon_denominator_strategy
turnover_calc_strategy [is.na(turnover_calc_strategy)]=0
turnover_calc_strategy$turnover = (turnover_calc_strategy$Weight - turnover_calc_strategy$x_epsilon_strategy)
turnover_calc_strategy$turnover <- abs(turnover_calc_strategy$turnover)
turnover_pattern_strategy <- aggregate(turnover~ym,data = turnover_calc_strategy,FUN = sum)
turnover_pattern_strategy$turnover<- 0.5*turnover_pattern_strategy$turnover
summary(turnover_pattern_strategy$turnover)
strategy.turnover<- mean(turnover_pattern_strategy$turnover)
plot(x=turnover_pattern_strategy$ym,y=turnover_pattern_strategy$turnover)
BRIC.strategy <- BRIC.maindata
# 5.1 Value Breakpoints ----
# subsetting the large cap stocks only (rebalanced yearly)
BRIC.strategy <- subset(BRIC.strategy, pf.size == "Big" )
# 5.1.1 B/M Devil ----
helper <- BRIC.strategy[month==7, .(median_devil = quantile(BM_Devil , probs = c(0.5), na.rm=T)),by=year]
BRIC.strategy <- merge(BRIC.strategy,helper,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.growth := ifelse(BM_Devil>median_devil,"Value",(ifelse(BM_Devil<=median_devil,"Growth",NA)))]
# 5.1.2 normal B/M ----
helper <- BRIC.strategy[month==7, .(median_normal = quantile(BM, probs = c(0.5), na.rm=T)),by=year]
BRIC.strategy <- merge(BRIC.strategy,helper,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.value := ifelse(BM>median_normal,"Value",(ifelse(BM<=median_normal,"Growth",NA)))]
# 5.2 Low Vol ----
helper <- BRIC.strategy[month==7, .(lower_20 = quantile(volatility , probs = c(0.2), na.rm=T)),by=year]
BRIC.strategy <- merge(BRIC.strategy,helper,
by.x=c("hcjun"),
by.y=c("year"),
all.x=T)
BRIC.strategy[ , pf.low_vol := ifelse(volatility>lower_20,"HighVol",(ifelse(volatility<=lower_20,"LowVol",NA)))]
# 5.3 Filtering ----
# filtering for growth or value stocks PLEASE COMMENT OUT and DECOMMENT OUT respectively
#BRIC.strategy <- subset(BRIC.strategy, pf.value == "Value" )
BRIC.strategy <- subset(BRIC.strategy, pf.growth == "Growth" )
# filtering for lowVol stocks
BRIC.strategy <- subset(BRIC.strategy, pf.low_vol == "LowVol" )
# filtering for winner stocks
#BRIC.strategy <- subset(BRIC.strategy, pf.momentum  == "Winner" )
# custom momentum
BRIC.strategy <- subset(BRIC.strategy, pf.customMomentum == "Winner" )
# assign new variable
strategy <- BRIC.strategy
# We can use the %in% operator to filter data by a logical vector
# setting up a df with the right months for quarterly rebalancing
quarterly <- subset(BRIC.strategy,month==c(1,4,7,10))
quarterly <- BRIC.strategy
quarterly$ym_1 <- quarterly$ym + 1/12
quarterly$ym_2 <- quarterly$ym + 2/12
qu1 <- subset(quarterly,select = c("ym","RET.USD","LMV.USD","Id","country.x","hcjun"))
qu2 <- subset(quarterly,select = c("ym_1","leadr1","leadm1","Id","country.x","hcjun"))
qu3 <- subset(quarterly,select = c("ym_2","leadr2","leadm2","Id","country.x","hcjun"))
colnames(qu2)[1] <- "ym"
colnames(qu2)[2] <- "RET.USD"
colnames(qu2)[3] <- "LMV.USD"
colnames(qu3)[1] <- "ym"
colnames(qu3)[2] <- "RET.USD"
colnames(qu3)[3] <- "LMV.USD"
qfull <- rbind(qu1,qu2,qu3)
risk_f <- subset(one_m_tbill,X1 >= 199606 & X1 <= 201810)
qfull <- left_join(x = qfull,y = risk_f,by = "ym")
qfull$RiRF <- qfull$RET.USD - as.double(qfull$RF)
strategy <- qfull
# Strategy
#filtering out unnecessary columns
turnover_calc_strategy <-subset(strategy,select= c("Id","ym","Weight","RET.USD"))
## when using equal weights don't run until BREAK
# 6.1 Value weights ----
# value weight returns
# calculate monthly market value over all stocks
strategy.valueWeights <- aggregate(LMV.USD ~ ym, data = strategy, FUN = sum)
colnames(strategy.valueWeights)[2] <- "TotalValue"
# join value weights to stocks
strategy <- inner_join(x = strategy, y = strategy.valueWeights, by = "ym")
# calculate value weight
strategy$Weight <- strategy$LMV.USD/strategy$TotalValue
# calculate value weight excess return / return
strategy$wRet <- strategy$Weight*strategy$RET.USD
strategy$wExRet <- strategy$Weight * strategy$RiRF
## TOP 10 ----
strategy_topTen <- strategy %>% arrange(desc(Weight)) %>% group_by(ym) %>% top_n(wt=Weight,10)
strategy.topTenBricY <- aggregate(Weight ~ ym, data = strategy_topTen, FUN = sum)
strategy.topTenBricT <- mean(strategy.topTenBricY$Weight)
## BREAK ... run from here when using equal weights
# 6.2 Strategy Statistics ----
## RETURNS ----
# per month
strategy.retBricM_intermediate <- aggregate(cbind(wRet,wExRet) ~ ym + hcjun, data = strategy,FUN = sum)
# add risk-free rate if there's no investment in a month
# risk_free rate for investment horizon
risk_free <- subset(one_m_tbill,X1 >= 199606 & X1 <= 201810)
# add hcjun
risk_free$year <- as.numeric(format(risk_free$ym, "%Y"))
risk_free$month <- as.numeric(format(risk_free$ym, "%m"))
risk_free <- data.table(risk_free)
risk_free[,hcjun := ifelse(month>=7,year,year-1)]
# left join risk_free rate and retBricM_intermediate
strategy.retBricM <- left_join(x = risk_free, y = strategy.retBricM_intermediate, by = "ym")
# exchange wExRet with 0 if na and wRet with RF if na
strategy.retBricM$wExRet <- strategy.retBricM$wExRet %>% replace_na(0)
strategy.retBricM[,wRetNew := ifelse(!is.na(wRet),wRet,RF)]
strategy.retBricM$wRet <- as.double(strategy.retBricM$wRetNew)
# rename
colnames(strategy.retBricM)[6] <- "hcjun"
strategy.retBricM <- subset(strategy.retBricM, select = c("ym","hcjun","wRet","wExRet"))
# per year
strategy.retBricY <- aggregate(cbind(wRet,wExRet) ~ hcjun, data = strategy.retBricM,FUN = mean)
# annualisation
strategy.retBricY$wRet <- strategy.retBricY$wRet * 12
strategy.retBricY$wExRet <- strategy.retBricY$wExRet * 12
# mean return of whole period
strategy.retBricT <- mean(strategy.retBricY$wRet)
# mean excess return of whole period
strategy.retExBricT <- mean(strategy.retBricY$wExRet)
## STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
strategy.sdBricT <- sd(strategy.retBricY$wRet)
## SHARP RATIO ----
strategy.srBricT <- strategy.retExBricT/strategy.sdBricT
## MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- strategy.retBricY$wRet
strategy.mdBricT <- maxdrawdown(ret)
## TRACKING ERROR ----
# merge portfolio returns and benchmark returns
strategy_benchmark <- inner_join(x = strategy.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(strategy_benchmark)[2] <- "wRet_strategy"
colnames(strategy_benchmark)[3] <- "wExRet_strategy"
colnames(strategy_benchmark)[4] <- "wRet_benchmark"
colnames(strategy_benchmark)[5] <- "wExRet_benchmark"
strategy_benchmark$pf_activeReturn <- strategy_benchmark$wRet_strategy - strategy_benchmark$wRet_benchmark
strategy.teBricT <- sd(strategy_benchmark$pf_activeReturn)
## INFROMATION RATIO ----
strategy.irBricT <- mean(strategy_benchmark$pf_activeReturn)/strategy.teBricT
## EFFECTIVE N ----
effectiveN <- subset(strategy,select = c("ym","Id","Weight"))
effectiveN$WeightSquare <- effectiveN$Weight * effectiveN$Weight
strategy.effectiveNM <- aggregate(WeightSquare ~ ym,data = effectiveN, FUN = sum)
strategy.effectiveNM$effN <- 1/strategy.effectiveNM$WeightSquare
strategy.effectiveNT <- mean(strategy.effectiveNM$effN)
# 6.3 Benchmark statistics ----
# mean return of whole period
benchmark.retBricT <- mean(benchmark.retBricY$wRet)
# mean excess return of whole period
benchmark.retExBricT <- mean(benchmark.retBricY$wExRet)
## STANDARD DEVIATION ----
# we calculate the sd out of the annualised portfolio returns
benchmark.sdBricT <- sd(benchmark.retBricY$wRet)
## SHARP RATIO ----
benchmark.srBricT <- benchmark.retExBricT/benchmark.sdBricT
## MAX DRAWDOWN ----
drawdown <- function(ret) {
cum.ret  <- c(0, cumsum(ret))
drawdown <- cum.ret - cummax(cum.ret)
return(tail(drawdown, -1))
}
maxdrawdown <- function(ret)min(drawdown(ret))
ret <- benchmark.retBricY$wRet
benchmark.mdBricT <- maxdrawdown(ret)
## TRACKING ERROR ----
# merge portfolio returns and benchmark returns
benchmark_benchmark <- inner_join(x = benchmark.retBricY, y = benchmark.retBricY, by = "hcjun")
colnames(benchmark_benchmark)[2] <- "wRet_benchmark"
colnames(benchmark_benchmark)[3] <- "wExRet_benchmark"
colnames(benchmark_benchmark)[4] <- "wRet_benchmark"
colnames(benchmark_benchmark)[5] <- "wExRet_benchmark"
benchmark_benchmark$pf_activeReturn <- benchmark_benchmark$wRet_benchmark - benchmark_benchmark$wRet_benchmark
benchmark.teBricT <- sd(benchmark_benchmark$pf_activeReturn)
## INFROMATION RATIO ----
benchmark.irBricT <- mean(benchmark_benchmark$pf_activeReturn)/benchmark.teBricT
## TOP 10 ----
benchmark_topTen <- BRIC.benchmark %>% arrange(desc(ValueWeight)) %>% group_by(ym) %>% top_n(wt=ValueWeight,10)
benchmark.topTenBricY <- aggregate(ValueWeight ~ ym, data = benchmark_topTen, FUN = sum)
benchmark.topTenBricT <- mean(benchmark.topTenBricY$ValueWeight)
## EFFECTIVE N ----
effectiveNBe <- subset(BRIC.benchmark,select = c("ym","Id","ValueWeight"))
effectiveNBe$WeightSquare <- effectiveNBe$ValueWeight * effectiveNBe$ValueWeight
benchmark.effectiveNM <- aggregate(WeightSquare ~ ym,data = effectiveNBe, FUN = sum)
benchmark.effectiveNM$effN <- 1/benchmark.effectiveNM$WeightSquare
benchmark.effectiveNT <- mean(benchmark.effectiveNM$effN)
turnover_calc_strategy <-subset(strategy,select= c("Id","ym","Weight","RET.USD"))
turnover_calc_strategy$RET.USD <- turnover_calc_strategy$RET.USD*(1/100)
# lagging Weight to get xi,t-1
s_weights_strategy<- subset(turnover_calc_strategy,select= c("Id","ym","Weight"))
s_weights_strategy<-reshape(s_weights_strategy, idvar = "ym", timevar = "Id", direction = "wide")
s_weights_strategy[is.na(s_weights_strategy)]=0
s_weights_strategy<-as.data.frame(s_weights_strategy)
s_lag_weights_strategy <-s_weights_strategy%>% mutate_at(vars(-"ym"),lag)
x.prevweight_strategy<-reshape(s_lag_weights_strategy,
direction = "long",idvar = "ym")
colnames(x.prevweight_strategy)[3]<-"WeightPrevPeriod"
#lagging RET.USD to get ri,t-1
s_returns_strategy<-subset(turnover_calc_strategy,select=c("Id","ym","RET.USD"))
#filtering for stocks in Strategy frame
s_returns_strategy<-setDT(s_returns_strategy)[Id %chin% turnover_calc_strategy$Id]
s_returns_strategy <-reshape(s_returns_strategy, idvar = "ym", timevar = "Id", direction = "wide")
s_returns_strategy [is.na(s_returns_strategy)]=0
s_returns_strategy <-as.data.frame(s_returns_strategy)
s_lag_returns_strategy <-s_returns_strategy %>% mutate_at(vars(-"ym"),lag)
x.prevret_strategy<-reshape(s_lag_returns_strategy, direction = "long",idvar = "ym")
colnames(x.prevret_strategy)[3]<-"RET.USDPrevPeriod"
x.prevret_strategy$RET.USDPrevPeriod <- x.prevret_strategy$RET.USDPrevPeriod*(1/100)
#leftjoining RET.USDPrevPeriod & WeightPrevPeriod to turnover_calc_strategy (aka strategy frame)
turnover_calc_strategy<-left_join(turnover_calc_strategy,x.prevweight_strategy,by = c("Id","ym"))
turnover_calc_strategy<-left_join(turnover_calc_strategy,x.prevret_strategy,by = c("Id","ym"))
turnover_calc_strategy [is.na(turnover_calc_strategy)]=0
#calculating x epsilon thing
#numerator
turnover_calc_strategy$x_epsilon_numerator_strategy <- turnover_calc_strategy$WeightPrevPeriod * (1+turnover_calc_strategy$RET.USDPrevPeriod)
x_epsilon_denominator_strategy <-aggregate(x_epsilon_numerator_strategy~ym,data = turnover_calc_strategy,FUN = sum)
colnames(x_epsilon_denominator_strategy)[2]<-"x_epsilon_denominator_strategy"
turnover_calc_strategy <-left_join(turnover_calc_strategy,x_epsilon_denominator_strategy,by="ym")
turnover_calc_strategy$x_epsilon_strategy <- turnover_calc_strategy$x_epsilon_numerator_strategy / turnover_calc_strategy$x_epsilon_denominator_strategy
turnover_calc_strategy [is.na(turnover_calc_strategy)]=0
turnover_calc_strategy$turnover = (turnover_calc_strategy$Weight - turnover_calc_strategy$x_epsilon_strategy)
turnover_calc_strategy$turnover <- abs(turnover_calc_strategy$turnover)
turnover_pattern_strategy <- aggregate(turnover~ym,data = turnover_calc_strategy,FUN = sum)
turnover_pattern_strategy$turnover<- 0.5*turnover_pattern_strategy$turnover
summary(turnover_pattern_strategy$turnover)
strategy.turnover<- mean(turnover_pattern_strategy$turnover)
plot(x=turnover_pattern_strategy$ym,y=turnover_pattern_strategy$turnover)
full_BRIC_ValueWeight <- c(strategy.retBricT,strategy.retExBricT,strategy.sdBricT,strategy.srBricT,strategy.mdBricT,strategy.teBricT,strategy.irBricT, strategy.avgNumberOfStocks, strategy.topTenBricT, strategy.turnover,strategy.effectiveNT)
full_BRIC_Benchmark <- c(benchmark.retBricT,benchmark.retExBricT,benchmark.sdBricT,benchmark.srBricT,benchmark.mdBricT,benchmark.teBricT,benchmark.irBricT, benchmark.avgNumberOfStocks, benchmark.topTenBricT, benchmark.turnover,benchmark.effectiveNT)

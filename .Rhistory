#1.1 leave raw data with date adjustment
BRIC.monthly.withNA <- subset(BRIC.monthly.raw, Date >= "1994-06-30" & Date <= "2019-01-01")
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
#1.2 working dataframe
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-06-30" & Date <= "2019-01-01")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
#2 delete na's
#2.1 monthly data
# no RET.USD data, no MV or no MV.USD
BRIC.monthly <- na.omit(BRIC.monthly,cols = "RET.USD","MV","MV.USD")
BRIC.yearly <- na.omit(BRIC.yearly,cols = "WC03501")
View(BRIC.yearly)
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
BRIC.yearly.raw <- BRIC.yearly
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
View(BRIC.yearly)
BRIC.yearly.ne <- na.omit(BRIC.yearly,cols = "WC03501")
BRIC.yearly.ne <- na.omit(BRIC.yearly,cols = "WC03501 ")
BRIC.yearly.ne <- is.na(BRIC.yearly,cols = "WC03501")
BRIC.yearly.ne <- na.omit(BRIC.yearly,cols = "country")
BRIC.yearly.ne <- na.omit(BRIC.yearly)
BRIC.yearly.ne <- BRIC.yearly
BRIC.yearly.ne <- na.omit(BRIC.yearly,cols = BRIC.yearly$WC03501)
View(BRIC.yearly.ne)
View(BRIC.monthly)
memory.limit(9999999999)
# loading R.data BRIC monthly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_monthly.RData")
# loading R.data BRIC monthly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_static.RData")
# loading R.data BRIC monthly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
library(tidyverse)
# loading libraries
library(data.table) # extension of the data.frame package. It is widely used for fast aggregation of large datasets, low latency add/update/remove of columns, quicker ordered joins, and a fast file reader.
library(dplyr) # data manipulation package
library(lubridate)
library(zoo) # methods for totally ordered indexed observations. It aims at performing calculations containing irregular time series of numeric vectors, matrices & factors
library(stats)
library(utils)
library(tidyverse)
BRIC.monthly.raw <- BRIC.monthly
BRIC.yearly.raw <- BRIC.yearly
#1 adjust date range (from July 1994 on)
#1.1 leave raw data with date adjustment
BRIC.monthly.withNA <- subset(BRIC.monthly.raw, Date >= "1994-06-30" & Date <= "2019-01-01")
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
#1.2 working dataframe
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-06-30" & Date <= "2019-01-01")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
BRIC.monthly %>%
drop_na(RET.USD)
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD)
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD)
summary(BRIC.monthly)
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD)
drop_na(MV)
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD)
drop_na(MV.USD)
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD,MV.USD)
summary(BRIC.monthly)
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD,MV,MV.USD)
BRIC.yearly %>%
drop_na(WC03501)
BRIC.yearly <- BRIC.yearly %>%
drop_na(WC03501)
replace(BRIC.yearly$WC03263,is.na(BRIC.yearly$WC03263),0)
View(BRIC.yearly)
summary(BRIC.yearly)
summary(BRIC.yearly$WC03501)
summary(BRIC.yearly)
BRIC.yearly.test <- BRIC.yearly %>%
mutate_at(WC03263,~replace_na(WC03263,0))
BRIC.yearly.test <- BRIC.yearly %>%
replace_na(WC03263,0)
BRIC.yearly.test <- BRIC.yearly %>%
mutate_at(BRIC.yearly$WC03263,~replace_na(BRIC.yearly$WC03263,0))
BRIC.yearly.test <- BRIC.yearly %>%
mutate_at(BRIC.yearly$WC03263,~replace_na(BRIC.yearly$WC03263,"0"))
BRIC.yearly.test <- BRIC.yearly %>%
mutate_at(BRIC.yearly$WC03263,~replace_na(WC03263,0))
BRIC.yearly$WC03263 <- replace_na(0)
summary(BRIC.yearly)
View(BRIC.yearly)
View(BRIC.yearly_helper)
View(BRIC.yearly.raw)
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
BRIC.yearly.raw <- BRIC.yearly
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
BRIC.yearly <- BRIC.yearly %>%
drop_na(WC03501)
View(BRIC.yearly)
BRIC.yearly$WC03263 %>% replace_na(0)
summary(BRIC.yearly)
BRIC.yearly <- BRIC.yearly$WC03263 %>% replace_na(0)
summary(BRIC.yearly)
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
BRIC.yearly.raw <- BRIC.yearly
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
BRIC.yearly <- BRIC.yearly %>%
drop_na(WC03501)
BRIC.yearly$WC03263 <- BRIC.yearly$WC03263 %>% replace_na(0)
View(BRIC.yearly)
summary(BRIC.yearly)
BRIC.yearly$BookValue <- BRIC.yearly$WC03501 + WC03263
BRIC.yearly$BookValue <- BRIC.yearly$WC03501 + BRIC.yearly$WC03263
View(BRIC.yearly)
summary(BRIC.yearly)
BRIC.yearly[BRIC.yearly$BookValue >= 0,]
BRIC.yearly <- BRIC.yearly[BRIC.yearly$BookValue >= 0,]
summary(BRIC.yearly)
View(BRIC.yearly)
BRIC.yearly_helper <- subset( BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","WC03501","WC01001","WC01051","WC01101","WC01251","WC02999","BookValue") )
BRIC.yearly <- subset( BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","WC03501","WC01001","WC01051","WC01101","WC01251","WC02999","BookValue") )
summary(BRIC.yearly)
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
memory.limit(9999999999)
# loading R.data BRIC monthly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_monthly.RData")
# loading R.data BRIC static
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_static.RData")
# loading R.data BRIC yearly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
memory.limit(9999999999)
# loading R.data BRIC monthly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_monthly.RData")
# loading R.data BRIC static
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_static.RData")
# loading R.data BRIC yearly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
# loading libraries
library(data.table) # extension of the data.frame package. It is widely used for fast aggregation of large datasets, low latency add/update/remove of columns, quicker ordered joins, and a fast file reader.
library(dplyr) # data manipulation package
library(lubridate)
library(zoo) # methods for totally ordered indexed observations. It aims at performing calculations containing irregular time series of numeric vectors, matrices & factors
library(stats)
library(utils)
library(tidyverse)
library(readr)
#0 save raw data
BRIC.monthly.raw <- BRIC.monthly
BRIC.yearly.raw <- BRIC.yearly
#1 adjust date range (from July 1994 to December 2018)
#1.1 leave raw data with date adjustment
BRIC.monthly.withNA <- subset(BRIC.monthly.raw, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
#1.2 working dataframe
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
#add the lagged MV.USD (this is the MV.USD from the previous month)
BRIC.monthly[, lag.value:=c(1, MV.USD[-.N]), by=Id]
# rename column to LMV.USD
colnames(BRIC.monthly)[14] <- "LMV.USD"
#delete entry for "1994-06-30" as lag-value is wrong and this data point not needed
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-07-29" & Date <= "2019-02-01")
# calculate MV.USD.June for every column
# help columns
BRIC.monthly[,month := month(Date)]
BRIC.monthly[,year := year(Date)]
BRIC.monthly[,hcjun := ifelse(month>=7,year,year-1)]
# MV.USD.June column
intermediate <- filter(BRIC.monthly,BRIC.monthly$month == 7)
# minimise for join
intermediate <- subset(intermediate, select = c("Id","LMV.USD","hcjun","month"))
colnames(intermediate)[2] <- "MV.USD.June"
BRIC.monthly <- subset(BRIC.monthly, select = c("Id","country","Date","MV","MV.USD","LMV.USD","RET","RET.USD","ym","hcjun"))
#delete na's, set 0 and calculate important values
# no RET.USD data, no MV or no LMV.USD
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD,MV,MV.USD,LMV.USD)
intermediate <- intermediate %>%
drop_na(MV.USD.June)
# inner join automatically deletes values where MV.USD.June is not available
BRIC.monthly <- inner_join(x = BRIC.monthly,y = intermediate, by = c("Id","hcjun"))
# order BRIC.monthly
BRIC.monthly <- subset(BRIC.monthly, select = c("Id","country","Date","MV","MV.USD","LMV.USD","MV.USD.June","RET","RET.USD","ym","hcjun"))
View(BRIC.monthly)
memory.limit(9999999999)
# loading R.data BRIC monthly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_monthly.RData")
# loading R.data BRIC static
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_static.RData")
# loading R.data BRIC yearly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
#0 save raw data
BRIC.monthly.raw <- BRIC.monthly
BRIC.yearly.raw <- BRIC.yearly
#1 adjust date range (from July 1994 to December 2018)
#1.1 leave raw data with date adjustment
BRIC.monthly.withNA <- subset(BRIC.monthly.raw, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
#1.2 working dataframe
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
#add the lagged MV.USD (this is the MV.USD from the previous month)
BRIC.monthly[, lag.value:=c(1, MV.USD[-.N]), by=Id]
# rename column to LMV.USD
colnames(BRIC.monthly)[14] <- "LMV.USD"
#delete entry for "1994-06-30" as lag-value is wrong and this data point not needed
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-07-29" & Date <= "2019-02-01")
# calculate MV.USD.June for every column
# help columns
BRIC.monthly[,month := month(Date)]
BRIC.monthly[,year := year(Date)]
BRIC.monthly[,hcjun := ifelse(month>=7,year,year-1)]
# MV.USD.June column
intermediate <- filter(BRIC.monthly,BRIC.monthly$month == 7)
# minimise for join
intermediate <- subset(intermediate, select = c("Id","LMV.USD","hcjun","month"))
colnames(intermediate)[2] <- "MV.USD.June"
BRIC.monthly <- subset(BRIC.monthly, select = c("Id","country","Date","MV","MV.USD","LMV.USD","RET","RET.USD","ym","hcjun","year","month"))
#delete na's, set 0 and calculate important values
# no RET.USD data, no MV or no LMV.USD
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD,MV,MV.USD,LMV.USD)
intermediate <- intermediate %>%
drop_na(MV.USD.June)
# inner join automatically deletes values where MV.USD.June is not available
BRIC.monthly <- inner_join(x = BRIC.monthly,y = intermediate, by = c("Id","hcjun"))
# order BRIC.monthly
BRIC.monthly <- subset(BRIC.monthly, select = c("Id","country","Date","MV","MV.USD","LMV.USD","MV.USD.June","RET","RET.USD","ym","hcjun","year","month"))
View(BRIC.monthly)
#add the lagged MV.USD (this is the MV.USD from the previous month)
BRIC.monthly[, lag.value:=c(1, MV.USD[-.N]), by=Id]
# rename column to LMV.USD
colnames(BRIC.monthly)[14] <- "LMV.USD"
#delete entry for "1994-06-30" as lag-value is wrong and this data point not needed
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-07-29" & Date <= "2019-02-01")
# calculate MV.USD.June for every column
# help columns
BRIC.monthly[,month := month(Date)]
BRIC.monthly[,year := year(Date)]
BRIC.monthly[,hcjun := ifelse(month>=7,year,year-1)]
# MV.USD.June column
intermediate <- filter(BRIC.monthly,BRIC.monthly$month == 7)
memory.limit(9999999999)
# loading R.data BRIC monthly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_monthly.RData")
# loading R.data BRIC static
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_static.RData")
# loading R.data BRIC yearly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
#0 save raw data
BRIC.monthly.raw <- BRIC.monthly
BRIC.yearly.raw <- BRIC.yearly
#1 adjust date range (from July 1994 to December 2018)
#1.1 leave raw data with date adjustment
BRIC.monthly.withNA <- subset(BRIC.monthly.raw, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
#1.2 working dataframe
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
#add the lagged MV.USD (this is the MV.USD from the previous month)
BRIC.monthly[, lag.value:=c(1, MV.USD[-.N]), by=Id]
# rename column to LMV.USD
colnames(BRIC.monthly)[14] <- "LMV.USD"
#delete entry for "1994-06-30" as lag-value is wrong and this data point not needed
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-07-29" & Date <= "2019-02-01")
# calculate MV.USD.June for every column
# help columns
BRIC.monthly[,month := month(Date)]
BRIC.monthly[,year := year(Date)]
BRIC.monthly[,hcjun := ifelse(month>=7,year,year-1)]
# MV.USD.June column
intermediate <- filter(BRIC.monthly,BRIC.monthly$month == 7)
# minimise for join
intermediate <- subset(intermediate, select = c("Id","LMV.USD","hcjun"))
colnames(intermediate)[2] <- "MV.USD.June"
BRIC.monthly <- subset(BRIC.monthly, select = c("Id","country","Date","MV","MV.USD","LMV.USD","RET","RET.USD","ym","hcjun","year","month"))
#delete na's, set 0 and calculate important values
# no RET.USD data, no MV or no LMV.USD
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD,MV,MV.USD,LMV.USD)
intermediate <- intermediate %>%
drop_na(MV.USD.June)
# inner join automatically deletes values where MV.USD.June is not available
BRIC.monthly <- inner_join(x = BRIC.monthly,y = intermediate, by = c("Id","hcjun"))
# order BRIC.monthly
BRIC.monthly <- subset(BRIC.monthly, select = c("Id","country","Date","MV","MV.USD","LMV.USD","MV.USD.June","RET","RET.USD","ym","hcjun","year","month"))
#3.1 book value / equity and related
# delete rows with no WC03501 (Common equity)
BRIC.yearly <- BRIC.yearly %>%
drop_na(WC03501)
# set WC03263 (deferred taxes) zero if NA
BRIC.yearly$WC03263 <- BRIC.yearly$WC03263 %>% replace_na(0)
# add column for BookValue (Hanauer 2020 calculation)
BRIC.yearly$BookValue <- BRIC.yearly$WC03501 + BRIC.yearly$WC03263
# delete rows with negative BookValue
BRIC.yearly <- BRIC.yearly[BRIC.yearly$BookValue >= 0,]
#3.2 total assets
# delete rows with no WC02999 (total assets)
BRIC.yearly <- BRIC.yearly %>%
drop_na(WC02999)
#3.3 operating profits
# "To have a valid value, at least one of cost components cost of goods sold, selling, general and administrative expenses, or interest expense must be non-missing." (Hanauer, 2019, p. 284) --> if one of these values is missing, we must delete these rows WC01001,WC01051,WC01101,WC01251
# delete rows where ALL 4 columns are NA
BRIC.yearly <- filter(BRIC.yearly,!is.na(WC01001) | !is.na(WC01051) | !is.na(WC01101) | !is.na(WC01251))
# replace all na's in this 4 columns with 0
BRIC.yearly$WC01001 <- BRIC.yearly$WC01001 %>% replace_na(0)
BRIC.yearly$WC01051 <- BRIC.yearly$WC01051 %>% replace_na(0)
BRIC.yearly$WC01101 <- BRIC.yearly$WC01101 %>% replace_na(0)
BRIC.yearly$WC01251 <- BRIC.yearly$WC01251 %>% replace_na(0)
# calculate operating profits (Hanauer, 2019, p.284)
BRIC.yearly$OperatingProfits <- (BRIC.yearly$WC01001 - BRIC.yearly$WC01051 - BRIC.yearly$WC01101 - BRIC.yearly$WC01251)
# 3.4 minimise data frame
# for BRIC.yearly we keep: Id, country, ICBSUC, YEAR, BookValue, OperatingProfits and total assets
# Note: WC07201 is not used, as our MV should be the MV from the monthly data for 06.y !
BRIC.yearly <- subset(BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","BookValue","OperatingProfits","WC02999"))
# last we rename WC02999 to total assets
colnames(BRIC.yearly)[7] <- "TotalAssets"
# load data sheet from French's website
FFData <- read_csv("FF_Research_Data_5_Factors_2x3.CSV",
skip = 2)
# shorting data frame
one_m_tbill <- as.data.frame(FFData[c("X1","RF")][1:693,])
# adding a ym column to risk free rate data
one_m_tbill$ym<-as.yearmon(one_m_tbill$X1, "%Y %m")
#delete X1 column
one_m_tbill <- subset(one_m_tbill,select = c("ym","RF"))
# merge risk-free rate (1 month treasury bill rate) with monthly data
BRIC.monthly <- left_join(x = BRIC.monthly, y = one_m_tbill, by = "ym")
# make rf column numeric
BRIC.monthly$RF <- as.numeric(BRIC.monthly$RF)
View(BRIC.monthly)
BRIC.monthly$RMRF <- BRIC.monthly$RET.USD - BRIC.monthly$RF
BRIC.monthly.df <- BRIC.monthly
BRIC.yearly.df <- BRIC.yearly
# Determine portfolio breakpoints for Size
# determine size portfolio allocation from July on using data that's public from end-of-June on
# we didn't calculate the lagged MV yet
setorder(BRIC.monthly.df,Date,-MV.USD.June)
hlpvariable <-  BRIC.monthly.df[month==7 & !is.na(MV.USD.June),
.(pf.size = ifelse((cumsum(MV.USD.June)/sum(MV.USD.June))>=0.9,"Small","Big"),Id),
by=year]
# Merge the size portfolio allocation back from July Y to June Y+1
panel_country <- merge(BRIC.monthly.df,hlpvariable,
by.x=c("hcjun","Id"),
by.y=c("year","Id"),
all.x=T)
View(panel_country)
summary(panel_country)
# Determine portfolio breakpoints for Size
# determine size portfolio allocation from July on using data that's public from end-of-June on
# we didn't calculate the lagged MV yet
setorder(BRIC.monthly.df,Date,-MV.USD.June)
hlpvariable <-  BRIC.monthly.df[month==7 & !is.na(MV.USD.June),
.(pf.size = ifelse((cumsum(MV.USD.June)/sum(MV.USD.June))>=0.9,"Small","Big"),Id),
by=year]
# Merge the size portfolio allocation back from July Y to June Y+1
panel_country <- merge(BRIC.monthly.df,hlpvariable,
by.x=c("hcjun","Id"),
by.y=c("year","Id"),
all.x=T)
panel_country_noNA <- na.omit(panel_country,cols = "Size")
panel_country_noNA <- na.omit(panel_country,cols = "pf.size")
View(panel_country)
View(panel_country_noNA)
panel_country <- na.omit(panel_country,cols = "pf.size")
View(panel_country)
View(panel_country)
View(BRIC.yearly)
setorder(BRIC.monthly,Date,-MV.USD.June)
hlpvariable <-  BRIC.monthly[month==7 & !is.na(MV.USD.June),
.(pf.size = ifelse((cumsum(MV.USD.June)/sum(MV.USD.June))>=0.9,"Small","Big"),Id),
by=year]
# Merge the size portfolio allocation back from July Y to June Y+1
panel_country <- merge(BRIC.monthly,hlpvariable,
by.x=c("hcjun","Id"),
by.y=c("year","Id"),
all.x=T)
# delete NA's (only about 1000 rows)
panel_country <- na.omit(panel_country,cols = "pf.size")
View(BRIC.monthly)
setorder(BRIC.monthly,Date,-MV.USD.June)
hlpvariable <-  BRIC.monthly[month==7 & !is.na(MV.USD.June),
.(pf.size = ifelse((cumsum(MV.USD.June)/sum(MV.USD.June))>=0.9,"Small","Big"),Id),
by=year]
# Merge the size portfolio allocation back from July Y to June Y+1
BRIC.monthly <- merge(BRIC.monthly,hlpvariable,
by.x=c("hcjun","Id"),
by.y=c("year","Id"),
all.x=T)
# delete NA's (only about 1000 rows)
BRIC.monthly <- na.omit(panel_country,cols = "pf.size")
View(BRIC.monthly)
memory.limit(9999999999)
# loading R.data BRIC monthly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_monthly.RData")
# loading R.data BRIC static
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_static.RData")
# loading R.data BRIC yearly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
#0 save raw data
BRIC.monthly.raw <- BRIC.monthly
BRIC.yearly.raw <- BRIC.yearly
#1 adjust date range (from July 1994 to December 2018)
#1.1 leave raw data with date adjustment
BRIC.monthly.withNA <- subset(BRIC.monthly.raw, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
#1.2 working dataframe
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
memory.limit(9999999999)
# loading R.data BRIC monthly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_monthly.RData")
# loading R.data BRIC static
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_static.RData")
# loading R.data BRIC yearly
load("C:/Users/johan/Documents/BRIC_Asset_Pricing_Project/BRIC_yearly.RData")
#0 save raw data
BRIC.monthly.raw <- BRIC.monthly
BRIC.yearly.raw <- BRIC.yearly
#1 adjust date range (from July 1994 to December 2018)
#1.1 leave raw data with date adjustment
BRIC.monthly.withNA <- subset(BRIC.monthly.raw, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly.withNA <- subset(BRIC.yearly.raw, YEAR >= "1994" & YEAR <= "2019")
#1.2 working dataframe
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-06-30" & Date <= "2019-02-01")
BRIC.yearly <- subset(BRIC.yearly, YEAR >= "1994" & YEAR <= "2019")
#add the lagged MV.USD (this is the MV.USD from the previous month)
BRIC.monthly[, lag.value:=c(1, MV.USD[-.N]), by=Id]
# rename column to LMV.USD
colnames(BRIC.monthly)[14] <- "LMV.USD"
#delete entry for "1994-06-30" as lag-value is wrong and this data point not needed
BRIC.monthly <- subset(BRIC.monthly, Date >= "1994-07-29" & Date <= "2019-02-01")
# calculate MV.USD.June for every column
# help columns
BRIC.monthly[,month := month(Date)]
BRIC.monthly[,year := year(Date)]
BRIC.monthly[,hcjun := ifelse(month>=7,year,year-1)]
# MV.USD.June column
intermediate <- filter(BRIC.monthly,BRIC.monthly$month == 7)
# minimise for join
intermediate <- subset(intermediate, select = c("Id","LMV.USD","hcjun"))
colnames(intermediate)[2] <- "MV.USD.June"
BRIC.monthly <- subset(BRIC.monthly, select = c("Id","country","Date","MV","MV.USD","LMV.USD","RET","RET.USD","ym","hcjun","year","month"))
#delete na's, set 0 and calculate important values
# no RET.USD data, no MV or no LMV.USD
BRIC.monthly <- BRIC.monthly %>%
drop_na(RET.USD,MV,MV.USD,LMV.USD)
intermediate <- intermediate %>%
drop_na(MV.USD.June)
# inner join automatically deletes values where MV.USD.June is not available
BRIC.monthly <- inner_join(x = BRIC.monthly,y = intermediate, by = c("Id","hcjun"))
# order BRIC.monthly
BRIC.monthly <- subset(BRIC.monthly, select = c("Id","country","Date","MV","MV.USD","LMV.USD","MV.USD.June","RET","RET.USD","ym","hcjun","year","month"))
#3.1 book value / equity and related
# delete rows with no WC03501 (Common equity)
BRIC.yearly <- BRIC.yearly %>%
drop_na(WC03501)
# set WC03263 (deferred taxes) zero if NA
BRIC.yearly$WC03263 <- BRIC.yearly$WC03263 %>% replace_na(0)
# add column for BookValue (Hanauer 2020 calculation)
BRIC.yearly$BookValue <- BRIC.yearly$WC03501 + BRIC.yearly$WC03263
# delete rows with negative BookValue
BRIC.yearly <- BRIC.yearly[BRIC.yearly$BookValue >= 0,]
#3.2 total assets
# delete rows with no WC02999 (total assets)
BRIC.yearly <- BRIC.yearly %>%
drop_na(WC02999)
#3.3 operating profits
# "To have a valid value, at least one of cost components cost of goods sold, selling, general and administrative expenses, or interest expense must be non-missing." (Hanauer, 2019, p. 284) --> if one of these values is missing, we must delete these rows WC01001,WC01051,WC01101,WC01251
# delete rows where ALL 4 columns are NA
BRIC.yearly <- filter(BRIC.yearly,!is.na(WC01001) | !is.na(WC01051) | !is.na(WC01101) | !is.na(WC01251))
# replace all na's in this 4 columns with 0
BRIC.yearly$WC01001 <- BRIC.yearly$WC01001 %>% replace_na(0)
BRIC.yearly$WC01051 <- BRIC.yearly$WC01051 %>% replace_na(0)
BRIC.yearly$WC01101 <- BRIC.yearly$WC01101 %>% replace_na(0)
BRIC.yearly$WC01251 <- BRIC.yearly$WC01251 %>% replace_na(0)
# calculate operating profits (Hanauer, 2019, p.284)
BRIC.yearly$OperatingProfits <- (BRIC.yearly$WC01001 - BRIC.yearly$WC01051 - BRIC.yearly$WC01101 - BRIC.yearly$WC01251)
# 3.4 minimise data frame
# for BRIC.yearly we keep: Id, country, ICBSUC, YEAR, BookValue, OperatingProfits and total assets
# Note: WC07201 is not used, as our MV should be the MV from the monthly data for 06.y !
BRIC.yearly <- subset(BRIC.yearly, select = c("Id","country","ICBSUC","YEAR","BookValue","OperatingProfits","WC02999"))
# last we rename WC02999 to total assets
colnames(BRIC.yearly)[7] <- "TotalAssets"
# load data sheet from French's website
FFData <- read_csv("FF_Research_Data_5_Factors_2x3.CSV",
skip = 2)
# shorting data frame
one_m_tbill <- as.data.frame(FFData[c("X1","RF")][1:693,])
# adding a ym column to risk free rate data
one_m_tbill$ym<-as.yearmon(one_m_tbill$X1, "%Y %m")
#delete X1 column
one_m_tbill <- subset(one_m_tbill,select = c("ym","RF"))
# merge risk-free rate (1 month treasury bill rate) with monthly data
BRIC.monthly <- left_join(x = BRIC.monthly, y = one_m_tbill, by = "ym")
# make rf column numeric
BRIC.monthly$RF <- as.numeric(BRIC.monthly$RF)
BRIC.monthly$RMRF <- BRIC.monthly$RET.USD - BRIC.monthly$RF
setorder(BRIC.monthly,Date,-MV.USD.June)
hlpvariable <-  BRIC.monthly[month==7 & !is.na(MV.USD.June),
.(pf.size = ifelse((cumsum(MV.USD.June)/sum(MV.USD.June))>=0.9,"Small","Big"),Id),
by=year]
# Merge the size portfolio allocation back from July Y to June Y+1
BRIC.monthly.df <- merge(BRIC.monthly,hlpvariable,
by.x=c("hcjun","Id"),
by.y=c("year","Id"),
all.x=T)
# delete NA's (only about 1000 rows)
BRIC.monthly.df <- na.omit(panel_country,cols = "pf.size")
View(BRIC.yearly)
